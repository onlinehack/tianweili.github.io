<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李天炜</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-06T02:22:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李天炜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式的八种写法比较</title>
    <link href="http://yoursite.com/2015/03/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%86%99%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2015/03/02/单例模式的八种写法比较/</id>
    <published>2015-03-02T11:08:39.000Z</published>
    <updated>2016-12-06T02:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到<code>饿汉式</code>和<code>懒汉式</code>这两种实现方式。但是除了这两种方式，本文还会介绍其他几种实现单例的方式，让我们来一起看看吧。</p>
<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。</p>
<p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>
<h2 id="基本的实现思路"><a href="#基本的实现思路" class="headerlink" title="基本的实现思路"></a>基本的实现思路</h2><p>单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。</p>
<p>单例的实现主要是通过以下两个步骤：</p>
<ol>
<li>将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</li>
<li>在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</p>
<h2 id="单例模式的八种写法"><a href="#单例模式的八种写法" class="headerlink" title="单例模式的八种写法"></a>单例模式的八种写法</h2><h3 id="1、饿汉式（静态常量）-可用"><a href="#1、饿汉式（静态常量）-可用" class="headerlink" title="1、饿汉式（静态常量）[可用]"></a>1、饿汉式（静态常量）[可用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p>
<p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>
<h3 id="2、饿汉式（静态代码块）-可用"><a href="#2、饿汉式（静态代码块）-可用" class="headerlink" title="2、饿汉式（静态代码块）[可用]"></a>2、饿汉式（静态代码块）[可用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p>
<h3 id="3、懒汉式-线程不安全-不可用"><a href="#3、懒汉式-线程不安全-不可用" class="headerlink" title="3、懒汉式(线程不安全)[不可用]"></a>3、懒汉式(线程不安全)[不可用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法起到了Lazy Loading的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>
<h3 id="4、懒汉式-线程安全，同步方法-不推荐用"><a href="#4、懒汉式-线程安全，同步方法-不推荐用" class="headerlink" title="4、懒汉式(线程安全，同步方法)[不推荐用]"></a>4、懒汉式(线程安全，同步方法)[不推荐用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。</p>
<p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p>
<h3 id="5、懒汉式-线程安全，同步代码块-不可用"><a href="#5、懒汉式-线程安全，同步代码块-不可用" class="headerlink" title="5、懒汉式(线程安全，同步代码块)[不可用]"></a>5、懒汉式(线程安全，同步代码块)[不可用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                singleton = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>
<h3 id="6、双重检查-不可用"><a href="#6、双重检查-不可用" class="headerlink" title="6、双重检查[不可用]"></a>6、双重检查[不可用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p>
<p>优点：线程安全；延迟加载；效率较高。</p>
<h3 id="7、静态内部类-推荐用"><a href="#7、静态内部类-推荐用" class="headerlink" title="7、静态内部类[推荐用]"></a>7、静态内部类[推荐用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>优点：避免了线程不安全，延迟加载，效率高。</p>
<h3 id="8、枚举-推荐用"><a href="#8、枚举-推荐用" class="headerlink" title="8、枚举[推荐用]"></a>8、枚举[推荐用]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line">    INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，很少见人这么写过。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候。</p>
<h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到&lt;code&gt;饿汉式&lt;/code&gt;和&lt;code&gt;懒汉式&lt;/code&gt;这两种实现方式。但是除了这两种方式，本文还会介绍其他几种实现单例的方式，让我们来一起看看吧。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>linux中的sort命令</title>
    <link href="http://yoursite.com/2015/02/25/linux%E4%B8%AD%E7%9A%84sort%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2015/02/25/linux中的sort命令/</id>
    <published>2015-02-25T15:44:09.000Z</published>
    <updated>2016-12-06T02:07:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>sort命令是根据不同的数据类型以行为单位对数据进行排序。</p>
<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sort命令是根据不同的数据类型以行为单位对数据进行排序。</p>
<p>sort的默认比较规则是从首字符向后，按照ASCII码值进行比较，将结果按照升序输出。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>sort命令的基本格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort [-bcfMnrtk] [<span class="built_in">source</span>-file] [-o output-file]</div></pre></td></tr></table></figure>
<p>sort命令可使用的参数有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-b   忽略每行前面的所有空格字符，从第一个可见字符开始比较。</div><div class="line">-c   检查文件是否已经排好序，如果乱序则输出第一个乱序行的相关信息，最后返回1</div><div class="line">-C   检查文件是否已经排好序，如果乱序，则不输出内容，仅返回1</div><div class="line">-f   排序时忽略大小写字母。</div><div class="line">-M   将前面3个字母依照月份的缩写进行排序，比如JAN小于FEB。</div><div class="line">-n   依照数值的大小排序。</div><div class="line">-o   将排序后的结果存入指定的文件</div><div class="line">-r   降序输出</div><div class="line">-t   &lt;分隔字符&gt;   指定排序时所用的栏位分隔字符</div><div class="line">-u   在输出行中去除重复行</div><div class="line">-k   选择以哪个区间进行排序。</div></pre></td></tr></table></figure>
<p>下面将会对这些参数进行介绍，其中简单的参数就不再赘述了。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="o选项"><a href="#o选项" class="headerlink" title="-o选项"></a>-o选项</h3><p>sort是把排序后结果输出到标准输出，所以需要使用重定向将结果写入指定的文件，比如<code>sort file &gt; newfile</code>。</p>
<p>但是重定向的方式在遇到这种需求就无能为力了——把结果输出到原文件中。</p>
<p>如果还是使用重定向的方式，则会把原文件给清空。</p>
<p>而使用<code>-o</code>参数则可以完美解决这个问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort -r test.dat -o test.dat</div></pre></td></tr></table></figure>
<h3 id="t与-k选项"><a href="#t与-k选项" class="headerlink" title="-t与-k选项"></a>-t与-k选项</h3><p>对于某些有固定格式的文件，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a	12</div><div class="line">b	32</div><div class="line">c	3</div></pre></td></tr></table></figure></p>
<p>如果想以第二列数值大小降序输出，则需要使用-t和-k参数了。其中-k指定分隔符，-k指定待排序的列。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort -nr -t\t -k2 test.bat -o test.bat</div></pre></td></tr></table></figure>
<p>作者：<a href="http://tianweili.github.com/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sort命令是根据不同的数据类型以行为单位对数据进行排序。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>linux中的awk命令</title>
    <link href="http://yoursite.com/2015/02/24/linux%E4%B8%AD%E7%9A%84awk%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2015/02/24/linux中的awk命令/</id>
    <published>2015-02-24T02:33:41.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Linux中的awk命令的一些知识以及如何使用awk编程。不同于grep的查找、sed的编辑等命令，awk命令在文本处理和生成报告等地方是经常用到的一个强大命令。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>awk命令主要用于文本分析。它的处理方式是读入文本，将每行记录以一定的分隔符（默认为空格）分割成不同的域，然后对不同的域进行各种处理与输出。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>awk命令的一个基本格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'&#123;pattern + action&#125;'</span> &#123;filenames&#125;</div></pre></td></tr></table></figure>
<p>无论awk命令简单还是复杂，基本的格式如上所示。其中引号为必须，引号内代表一个awk程序。大括号非必须，括起来用于根据特定的模式对一系列指令进行分组。pattern是在数据中查找内容，支持正则匹配。action对查找出来的记录执行相应的处理，比如打印和输出等。</p>
<h2 id="awk三种调用方式"><a href="#awk三种调用方式" class="headerlink" title="awk三种调用方式"></a>awk三种调用方式</h2><h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F <span class="string">'field-separator'</span>] <span class="string">'commands'</span> input-file(s)</div></pre></td></tr></table></figure>
<p>其中的<code>-F</code>指令是可选的，后面跟着指定的域分隔符，比如tab键等（默认是空格）。后面的<code>commands</code>是真正的awk命令。<code>input-file(s)</code>代表输入的一个或多个文件</p>
<p>命令行调用方式是最经常使用的一种方式，也是本文所讲的重点。</p>
<h3 id="shell脚本方式"><a href="#shell脚本方式" class="headerlink" title="shell脚本方式"></a>shell脚本方式</h3><p>把平时所写的shell脚本的首行<code>#!/bin/sh</code>换成<code>#!/bin/awk</code>。把所有的awk命令插入脚本中，通过调用脚本来执行awk命令。</p>
<h3 id="插入文件调用"><a href="#插入文件调用" class="headerlink" title="插入文件调用"></a>插入文件调用</h3><p>把所有的awk命令插入单独的文件中，然后通过以下命令调用awk：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="_">-f</span> awk-script-file input-file(s)</div></pre></td></tr></table></figure>
<p>其中<code>-f</code>指定了要调用的包含awk命令的文件。</p>
<h2 id="awk应用示例"><a href="#awk应用示例" class="headerlink" title="awk应用示例"></a>awk应用示例</h2><h3 id="打印指定字段"><a href="#打印指定字段" class="headerlink" title="打印指定字段"></a>打印指定字段</h3><p>打印当前目录下所有的文件名和文件大小列表，以tab键分割：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lh | awk <span class="string">'&#123;print $5"\t"$9&#125;'</span></div></pre></td></tr></table></figure>
<p>$0变量是指当前一行记录，$1是指第一个域数据，$2指第二个域数据……以此类推。</p>
<h3 id="print与printf"><a href="#print与printf" class="headerlink" title="print与printf"></a>print与printf</h3><p>awk提供了print与printf两种打印输出的函数。</p>
<p>print的参数可以是变量、数值和字符串。参数用逗号分割，字符串必须用双引号引用。</p>
<p>printf与C语言中的printf函数类似，可以用来格式化字符串。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)&#125;'</span> /etc/passwd</div></pre></td></tr></table></figure>
<h3 id="根据指定分隔符切割域"><a href="#根据指定分隔符切割域" class="headerlink" title="根据指定分隔符切割域"></a>根据指定分隔符切割域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ll | awk -F <span class="string">'\t'</span> <span class="string">'print $9'</span></div></pre></td></tr></table></figure>
<h3 id="BEGIN…END"><a href="#BEGIN…END" class="headerlink" title="BEGIN…END"></a>BEGIN…END</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lh | awk <span class="string">'BEGIN &#123;print "size\tfilename"&#125;  &#123;print $5"\t"$9&#125; END &#123;print "---end---"&#125;'</span></div></pre></td></tr></table></figure>
<p><code>BEGIN...END</code>语句的执行流程是，awk命令读入数据，然后从BEGIN语句开始，依次读取每一行记录，并打印相应的域，当所有记录都处理后再执行END语句后的程序。也就是说<code>BEGIN...END</code>语句块中的内容在读取数据过程中会反复执行，直到数据读取完成。</p>
<h3 id="pattern正则匹配"><a href="#pattern正则匹配" class="headerlink" title="pattern正则匹配"></a>pattern正则匹配</h3><p>下面的例子表示打印当前目录下，所有以.bat后缀结尾的文件名列表：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls <span class="_">-l</span> | awk -F: <span class="string">'/\.dat$/&#123;print $9&#125;'</span></div></pre></td></tr></table></figure>
<h2 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h2><p>awk有许多内置变量用来设置环境变量信息，这些变量都可以被改变。常用的内置变量和作用如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ARGC               命令行参数个数</div><div class="line">ARGV               命令行参数排列</div><div class="line">ENVIRON            支持队列中系统环境变量的使用</div><div class="line">FILENAME           awk浏览的文件名</div><div class="line">FNR                浏览文件的记录数</div><div class="line">FS                 设置输入域分隔符，等价于命令行-F选项</div><div class="line">NF                 浏览记录的域的个数</div><div class="line">NR                 已读的记录数</div><div class="line">OFS                输出域分隔符</div><div class="line">ORS                输出记录分隔符</div><div class="line">RS                 指定用来切片的分隔符</div></pre></td></tr></table></figure>
<p>awk中的内置变量都是很有用处的，可以直接使用。比如上面讲过的指定分隔符操作就可以用FS变量来代替：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ll | awk <span class="string">'&#123;FS="\t";&#125; &#123;print $9&#125;'</span></div></pre></td></tr></table></figure>
<p>下面会有很多实用awk内置变量的例子。</p>
<h2 id="awk编程"><a href="#awk编程" class="headerlink" title="awk编程"></a>awk编程</h2><h3 id="定义变量和运算"><a href="#定义变量和运算" class="headerlink" title="定义变量和运算"></a>定义变量和运算</h3><p>awk可以自定义变量，并参与运算。</p>
<p>比如统计当前目录下列出的文件总大小，以M为单位显示出来：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls <span class="_">-l</span> | awk <span class="string">'BEGIN &#123;size=0;&#125; &#123;size+=$5;&#125; END &#123;print "size is ", size&#125;'</span></div></pre></td></tr></table></figure>
<p>注意此统计没有把文件夹下的所有文件算在内。</p>
<p>自定义的变量有时候可以不用作初始化操作，不过正规起见，还是建议作初始化操作为好。</p>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>awk中的条件语句跟C语言类似，声明方式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(expression)&#123;</div><div class="line">	statement1;</div><div class="line">	statement2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(expression)&#123;</div><div class="line">	statement1;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	statement2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(expression1)&#123;</div><div class="line">	statement1;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expression2) &#123;</div><div class="line">	statement2;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	statement3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下面例子，将第三列为12，第六列为0的行打印输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN &#123;FS="\t"&#125;&#123;if($3==12 &amp;&amp; $6==0) print $0&#125; END'</span> incoming_daily_20150223.dat</div></pre></td></tr></table></figure>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>awk中的循环语句同样与C语言中的类似，支持while、do/while、for、break、continue关键字。</p>
<p>看下面的例子，输出每行的行号和第一列的数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN &#123;FS="\t";&#125; &#123;data[NR] = $1&#125; END &#123;for(i=1; i&lt;=NR; i++) print i"\t"data[i]&#125;'</span> incoming_daily_20150223.dat</div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>看下面例子，统计第六列每一个值出现的次数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN &#123;FS="\t"&#125;&#123;count[$6]++&#125; END &#123;for(x in count) print x,count[x]&#125;'</span> incoming_daily_20150223.dat</div></pre></td></tr></table></figure>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了Linux中的awk命令的一些知识以及如何使用awk编程。不同于grep的查找、sed的编辑等命令，awk命令在文本处理和生成报告等地方是经常用到的一个强大命令。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 开闭原则</title>
    <link href="http://yoursite.com/2015/02/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/15/设计模式六大原则-开闭原则/</id>
    <published>2015-02-15T14:03:39.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>开闭原则是设计模式六大原则中最重要也是最“虚”的一个原则。为什么说它最重要呢？因为前面五大原则的目的都是为了实现这个开闭原则，开闭原则相当于它们的主旨思想。为什么说它“虚”呢？因为开闭原则只是个指导思想，不像另外五大原则都有具体可行的指导方法。废话不多说，我们开始了解什么是开闭原则吧。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/15/open-close-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/15/open-close-principle/</a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>Software entities like classes, modules and functions shoule be open for extension but closed for modifications.（一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。）</p>
</blockquote>
<p>开闭原则的定义很短，就是对扩展开放，对修改关闭。但是为什么要遵守这一个原则呢？</p>
<p>做过实际项目的筒子们应该都会深有体会，一个软件在其生命周期内都会发生很多变化，这几乎是不可避免的。无论是需求的变化、业务逻辑的变化、程序代码的变化等等，这些变化都有可能对整个软件的稳定性造成一定的威胁。</p>
<p>而开闭原则就是应对这些变化的，它告诉我们应该通过扩展来实现变化，而不是通过修改已有的代码。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我记得上中学的时候，每次考试出成绩的时候老师都会站在讲台上一遍发卷子一遍念出每位同学的分数，下面的学生们心理都暗自捏了一把汗。对于念出自己分数的同学，如果考得好，走上讲台领会卷子，自然心中倍感自豪。但是如果考得不好，一路上感觉都很惭愧啊，此时就很不希望老师当众把自己分数念出来。</p>
<p>下面我们来看看这种场景下的UML类图：</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/open-close-principle1.png" alt=""></p>
<p>程序代码如下：</p>
<p>学生类，每个学生都有姓名和成绩：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String grade;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String grade)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.grade = grade;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> grade;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>老师类，每个老师管理一群的学生：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		students.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="string">"60"</span>));</div><div class="line">		students.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="string">"70"</span>));</div><div class="line">		students.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>, <span class="string">"80"</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Teacher teacher = <span class="keyword">new</span> Teacher();</div><div class="line">		<span class="keyword">for</span> (Student student : teacher.students) &#123;</div><div class="line">			System.out.println(<span class="string">"姓名："</span> + student.getName() + <span class="string">" 成绩："</span> + student.getGrade());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">姓名：张三 成绩：60</div><div class="line">姓名：李四 成绩：70</div><div class="line">姓名：王五 成绩：80</div></pre></td></tr></table></figure></p>
<p>最后王同学看到自己成绩不错，裂开嘴笑了。而张同学就惨了，差点不及格，在全班同学的哄笑中领走了试卷。</p>
<h2 id="更改需求"><a href="#更改需求" class="headerlink" title="更改需求"></a>更改需求</h2><p>因为这种当众念出学生成绩的行为可能为伤害到一些成绩不是那么好的同学的自尊心，所以临时决定要对这种念出分数的方式进行改革。把同学们的成绩按照级别来分，分别有优秀，良好，一般，及格，不及格这几种。这样可以照顾成绩不好的同学的自尊心。</p>
<p>那么我们怎么根据这种需求来更改我们的软件呢？</p>
<p>有人说直接修改Student类的getGrade方法不就行了嘛。可能有很多人在实际项目中都是这么做的，但是这就违背了开闭原则，开闭原则要求我们尽量不要修改已有的代码，尽量通过扩展来实现改变。</p>
<p>因为我们举的例子比较简单，但是在实际复杂的项目中，首先理解已有的方法业务逻辑可能就不是一件容易的事情，更何况如果再有其他实体类需要调用你已有的方法，如果你修改了这个方法，所有调用这个方法的代码都得需要找到并修改，这是一件既困难又不安全的做法。</p>
<p>再者说修改了getGrade方法，那么这下只能知道学生成绩处于哪一个层次了，老师也无法知道学生的具体分数了。</p>
<p>那么我们应该怎么做呢？</p>
<p>既然前门我们知道了开闭原则，我们就要用上。我们可以通过扩展已有的代码来实现改变，可以增加一个LevelStudent来继承Student，并扩展修改getGrade方法。</p>
<p>修改后的UML类图如下所示：</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/open-close-principle2.png" alt=""></p>
<p>增加LevelStudent类代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LevelStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LevelStudent</span><span class="params">(String name, String grade)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(name, grade);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</div><div class="line">		String level = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> grade_ = Integer.valueOf(<span class="keyword">super</span>.getGrade());</div><div class="line">		<span class="keyword">if</span> (grade_ &gt;= <span class="number">90</span>) &#123;</div><div class="line">			level = <span class="string">"优秀"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade_ &gt;= <span class="number">80</span> &amp;&amp; grade_ &lt; <span class="number">90</span>) &#123;</div><div class="line">			level = <span class="string">"良好"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade_ &gt;= <span class="number">70</span> &amp;&amp; grade_ &lt; <span class="number">80</span>) &#123;</div><div class="line">			level = <span class="string">"一般"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade_ &gt;= <span class="number">60</span> &amp;&amp; grade_ &lt; <span class="number">70</span>) &#123;</div><div class="line">			level = <span class="string">"及格"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade_ &lt; <span class="number">60</span>) &#123;</div><div class="line">			level = <span class="string">"不及格"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> level;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开闭原则是对扩展开放，对修改关闭。</p>
<p>开闭原则的主旨是为了拥抱变化。</p>
<p>在六大原则中，开闭原则只是一个思想，没有具体实际操作方法。其他五大原则都是为了实现这个开闭思想的一些方法和工具。</p>
<p>想要遵守开闭原则，就需要一个设计合理的系统。可以说在做系统设计的时候就要考虑到未来的扩展和改变。</p>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/15/open-close-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/15/open-close-principle/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开闭原则是设计模式六大原则中最重要也是最“虚”的一个原则。为什么说它最重要呢？因为前面五大原则的目的都是为了实现这个开闭原则，开闭原则相当于它们的主旨思想。为什么说它“虚”呢？因为开闭原则只是个指导思想，不像另外五大原则都有具体可行的指导方法。废话不多说，我们开始了解什么是开闭原则吧。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 迪米特法则</title>
    <link href="http://yoursite.com/2015/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/12/设计模式六大原则-迪米特法则/</id>
    <published>2015-02-12T14:11:30.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>迪米特法则有很多种说法，比如：一个类应该应该对其他类尽可能了解得最少；类只与直接的朋友通信等等。但是其最终目的只有一个，就是让类间解耦。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/12/law-of-demeter/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/12/law-of-demeter/</a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>迪米特法则：Law Of Demeter，LoD。</p>
<p>也被称为最少知识原则，Least Knowledge Principle，LKP。</p>
</blockquote>
<p>就是说一个对象应该对其他对象保持最少的了解。正如最少知识原则这个定义一样，一个类应该对其耦合的其他类或所调用的类知道得最少。所耦合的类内部无论如何复杂，怎么实现的我都不需要知道，我只调用你public出来的这些方法，其他都不用知道。</p>
<p>另外可以解释一下开头提到的只与直接的朋友通信，什么叫直接的朋友呢？我们继续看。</p>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>光看定义可能无法完全理解它所表达的含义，以及在什么场景下才需要使用这个迪米特法则。现在我们就来举个“栗子”。</p>
<p>现在市面上各种人脉书上很多都会提到“六度人脉”这个理论，这个理论说的是你与世界上任何一个人中间只隔了六个人。也就是说你想找任何一个人，无论这个人是政界要人，还是商界巨鳄，抑或是明星名人，你最多只通过六个人就可以联系到他（想想还有点小激动呢-_-#）。</p>
<p>我们暂且不论这个理论是对是错，在现实生活中我们也经常遇到这样的情况。比如你想办一件事情，但是凭借你的能力是做不到的，而你周围的朋友也无法帮你办到。但是恰好你有一个朋友认识有另外一个朋友可以办得成此事，那么你只有拜托你这位朋友中间牵线搭桥，让他的朋友帮你办好此事。</p>
<p>在这个例子中，我们就暂且定义你为A，你的朋友为B，你朋友的朋友为C好了。</p>
<h2 id="反面教材"><a href="#反面教材" class="headerlink" title="反面教材"></a>反面教材</h2><p>我们先来看看表达此种关系的UML类图：</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/law-of-demeter1.png" alt=""></p>
<p>实现代码如下：</p>
<p>1.类A和类B是好朋友，能找到类B来帮忙：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> B(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		B b = getB(<span class="string">"李四"</span>);</div><div class="line">		C c = b.getC(<span class="string">"王五"</span>);</div><div class="line">		c.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.类B和类C是好朋友，能知道类C来帮忙：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> C(name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.类C能够办成此事：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(name + <span class="string">"把这件事做好了"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.场景类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		A a = <span class="keyword">new</span> A(<span class="string">"张三"</span>);</div><div class="line">		a.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">王五把这件事做好了</div></pre></td></tr></table></figure></p>
<p>上面的输出虽然是把事情成功办好了，但是仔细看业务逻辑明显是不对的。A和C又不是好朋友，为什么在类A中会出现类C呢？他们又互相不认识。</p>
<p>看到这里很多人都会明白，这种场景在实际开发中是非常常见的一种情况。对象A需要调用对象B的方法，对象B有需要调用对象C的方法……就是常见的getXXX().getXXX().getXXX()……类似于这种代码。如果你发现你的代码中也有这样的代码，那就考虑下是不是违反迪米特法则，是不是要重构一下了。</p>
<h2 id="正确例子"><a href="#正确例子" class="headerlink" title="正确例子"></a>正确例子</h2><p>为了符合迪米特法则，也为了让业务逻辑能够说得通，我们把上面的例子稍微修改一下。</p>
<p>UML类图如下：</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/law-of-demeter2.png" alt=""></p>
<p>代码如下：</p>
<p>1.类A和类B是好朋友，能找到类B来帮忙：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> B(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		B b = getB(<span class="string">"李四"</span>);</div><div class="line">		b.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.类B和类C是好朋友，能知道类C来帮忙：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> C <span class="title">getC</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> C(name);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">		C c = getC(<span class="string">"王五"</span>);</div><div class="line">		c.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.类C能够办成此事：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(name + <span class="string">"把这件事做好了"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.场景类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		A a = <span class="keyword">new</span> A(<span class="string">"张三"</span>);</div><div class="line">		a.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">王五把这件事做好了</div></pre></td></tr></table></figure></p>
<p>上面代码只是修改了下类A和B的work方法，使之符合了迪米特法则：</p>
<ul>
<li>类A只与最直接的朋友类B通信，不与类C通信；</li>
<li>类A只调用类B提供的方法即可，不用关心类B内部是如何实现的（至于B是怎么调用的C，这些A都不用关心）。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>迪米特法则的目的是让类之间解耦，降低耦合度。只有这样，类的可复用性才能提高。</p>
<p>但是迪米特法则也有弊端，它会产生大量的中转类或跳转类，导致系统的复杂度提高。</p>
<p>所以我们不要太死板的遵守这个迪米特法则，在系统设计的时候，在弱耦合和结构清晰之间反复权衡。尽量保证系统结构清晰，又能做到低耦合。</p>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/12/law-of-demeter/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/12/law-of-demeter/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迪米特法则有很多种说法，比如：一个类应该应该对其他类尽可能了解得最少；类只与直接的朋友通信等等。但是其最终目的只有一个，就是让类间解耦。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 接口隔离原则</title>
    <link href="http://yoursite.com/2015/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/10/设计模式六大原则-接口隔离原则/</id>
    <published>2015-02-10T15:01:20.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类B和类D来说不是最小接口，则类B和类D必须去实现他们不需要的方法。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>
<h2 id="什么是接口隔离原则"><a href="#什么是接口隔离原则" class="headerlink" title="什么是接口隔离原则"></a>什么是接口隔离原则</h2><p>接口隔离原则比较简单，有两种定义：</p>
<blockquote>
<ul>
<li>Clients should not be forced to depend upon interfaces that they don’t use.（客户端不应该强行依赖它不需要的接口）</li>
<li>The dependency of one class to another one should depend on the smallest possible interface.（类间的依赖关系应该建立在最小的接口上）</li>
</ul>
</blockquote>
<p>其实上述两种定义说的是同一种意思。客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</p>
<p>通过简单的代码还原开篇的问题，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类B实现了接口I的方法1"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类B实现了接口I的方法2"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;<span class="comment">//类B并不需要接口I的方法3功能，但是由于实现接口I，所以不得不实现方法3</span></div><div class="line">        <span class="comment">//在这里写一个空方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类D实现了接口I的方法2"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类D实现了接口I的方法3"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;<span class="comment">//类D并不需要接口I的方法1功能，但是由于实现接口I，所以不得不实现方法1</span></div><div class="line">        <span class="comment">//在这里写一个空方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//类A通过接口I依赖类B</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I i)</span></span>&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//类C通过接口I依赖类D</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I i)</span></span>&#123;</div><div class="line">        i.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        A a = <span class="keyword">new</span> A();</div><div class="line">        I i1 = <span class="keyword">new</span> B();</div><div class="line">        a.depend1(i1);</div><div class="line">         </div><div class="line">        C c = <span class="keyword">new</span> C();</div><div class="line">        I i2 = <span class="keyword">new</span> D();</div><div class="line">        c.depend1(i2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">类B实现了接口I的方法1</div><div class="line">类D实现了接口I的方法3</div></pre></td></tr></table></figure></p>
<p>从以上代码可以看出，如果接口过于臃肿，不同业务逻辑的抽象方法都放在一个接口内，则会造成它的实现类必须实现自己并不需要的方法，这种设计方式显然是不妥当的。所以我们要修改上述设计方法，把接口I拆分成3个接口，使得实现类只需要实现自己需要的接口即可。只贴出修改后的接口和实现类的代码，修改代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">I1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">I2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">I3</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I1</span>,<span class="title">I2</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类B实现了接口I的方法1"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类B实现了接口I的方法2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I2</span>,<span class="title">I3</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类D实现了接口I的方法2"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"类D实现了接口I的方法3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="与单一职责原则的区别"><a href="#与单一职责原则的区别" class="headerlink" title="与单一职责原则的区别"></a>与单一职责原则的区别</h2><p>到了这里，有些人可能觉得接口隔离原则与单一职责原则很相似，其实不然。</p>
<p>第一，单一职责原则注重的是职责；而接口隔离原则注重对接口依赖的隔离。</p>
<p>第二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口，主要针对抽象，针对程序整体框架的构建。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>原则是前人经验的总结，在软件设计中具有一定的指导作用，但是不能完全照搬这些原则。对于接口隔离原则来说，接口尽量小，但是也要有限度。对接口进行细化可以提高程序设计灵活性是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</p>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类B和类D来说不是最小接口，则类B和类D必须去实现他们不需要的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 依赖倒置原则</title>
    <link href="http://yoursite.com/2015/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/07/设计模式六大原则-依赖倒置原则/</id>
    <published>2015-02-07T14:45:14.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑。类B和C是底层模块，负责基本的原子操作。假如修改类A，将会给程序带来不必要的风险。而遵循依赖倒置原则的程序设计可以解决这一问题。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/</a></p>
<h2 id="什么是依赖倒置原则"><a href="#什么是依赖倒置原则" class="headerlink" title="什么是依赖倒置原则"></a>什么是依赖倒置原则</h2><p>英文缩写DIP（Dependence Inversion Principle）。</p>
<p>原始定义：</p>
<blockquote>
<p>High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p>
</blockquote>
<p>翻译过来就三层含义：</p>
<ul>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节；</li>
<li>细节应该依赖抽象。</li>
</ul>
<p>抽象：即抽象类或接口，两者是不能够实例化的。</p>
<p>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</p>
<p>现在我们来通过实例还原开篇问题的场景，以便更好的来理解。下面代码描述了一个简单的场景，Jim作为人有吃的方法，苹果有取得自己名字的方法，然后实现Jim去吃苹果。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//具体Jim人类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jim</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Apple apple)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Jim eat "</span> + apple.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体苹果类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Jim jim = <span class="keyword">new</span> Jim();</div><div class="line">        Apple apple = <span class="keyword">new</span> Apple();</div><div class="line">        jim.eat(apple);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：Jim eat apple</p>
<p>上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。</p>
<p>上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。</p>
<p>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//人接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Fruit fruit)</span></span>;<span class="comment">//人都有吃的方法，不然都饿死了</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//水果接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//水果都是有名字的</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//具体Jim人类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jim</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Fruit fruit)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Jim eat "</span> + fruit.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体苹果类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体香蕉类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"banana"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        People jim = <span class="keyword">new</span> Jim();</div><div class="line">        Fruit apple = <span class="keyword">new</span> Apple();</div><div class="line">        Fruit Banana = <span class="keyword">new</span> Banana();<span class="comment">//这里符合了里氏替换原则</span></div><div class="line">        jim.eat(apple);</div><div class="line">        jim.eat(Banana);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Jim eat apple</div><div class="line">Jim eat banana</div></pre></td></tr></table></figure></p>
<ul>
<li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>
<li>People和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。</li>
<li>Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。</li>
</ul>
<h2 id="什么是倒置"><a href="#什么是倒置" class="headerlink" title="什么是倒置"></a>什么是倒置</h2><p>到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。</p>
<h2 id="依赖的三种实现方式"><a href="#依赖的三种实现方式" class="headerlink" title="依赖的三种实现方式"></a>依赖的三种实现方式</h2><p>对象的依赖关系有三种方式来传递：</p>
<h3 id="接口方法中声明依赖对象。"><a href="#接口方法中声明依赖对象。" class="headerlink" title="接口方法中声明依赖对象。"></a>接口方法中声明依赖对象。</h3><p>就是我们上面代码所展示的那样。</p>
<h3 id="构造方法传递依赖对象。"><a href="#构造方法传递依赖对象。" class="headerlink" title="构造方法传递依赖对象。"></a>构造方法传递依赖对象。</h3><p>在构造函数中的需要传递的参数是抽象类或接口的方式实现。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//具体Jim人类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jim</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> Fruit fruit;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Jim</span><span class="params">(Fruit fruit)</span></span>&#123;<span class="comment">//构造方法传递依赖对象</span></div><div class="line">        <span class="keyword">this</span>.fruit = fruit;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Fruit fruit)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Jim eat "</span> + <span class="keyword">this</span>.fruit.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Setter方法传递依赖对象。"><a href="#Setter方法传递依赖对象。" class="headerlink" title="Setter方法传递依赖对象。"></a>Setter方法传递依赖对象。</h3><p>在我们设置的setXXX方法中的参数为抽象类或接口，来实现传递依赖对象。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//具体Jim人类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jim</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> Fruit fruit;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFruit</span><span class="params">(Fruit fruit)</span></span>&#123;<span class="comment">//setter方式传递依赖对象</span></div><div class="line">        <span class="keyword">this</span>.fruit = fruit;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Jim eat "</span> + <span class="keyword">this</span>.fruit.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>从上面的代码修改过程中，我们可以看到由于类之间松耦合的设计，面向接口编程依赖抽象而不依赖细节，所以在修改某个类的代码时，不会牵涉到其他类的修改，显著降低系统风险，提高系统健壮性。</p>
<p>还有一个优点是，在我们实际项目开发中，都是多人团队协作，每人负责某一模块。比如一个人负责开发People模块，一人负责开发Fruit模块，如果未采用依赖倒置原则，没有提取抽象，那么开发People模块的人必须等Fruit模块开发完成后自己才能开发，否则编译都无法通过，这就是单线程的开发。为了能够两人并行开发，设计时遵循依赖倒置原则，提取抽象，就可以大大提高开发进度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说到底，依赖倒置原则的核心就是面向接口编程的思想，尽量对每个实现类都提取抽象和公共接口形成接口或抽象类，依赖于抽象而不要依赖于具体实现。依赖倒置原则的本质其实就是通过抽象（抽象类或接口）使各个类或模块的实现彼此独立，不相互影响，实现模块间的松耦合。但是这个原则也是6个设计原则中最难以实现的了，如果没有实现这个原则，那么也就意味着开闭原则（对扩展开放，对修改关闭）也无法实现。</p>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑。类B和C是底层模块，负责基本的原子操作。假如修改类A，将会给程序带来不必要的风险。而遵循依赖倒置原则的程序设计可以解决这一问题。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 里氏替换原则</title>
    <link href="http://yoursite.com/2015/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/04/设计模式六大原则-里氏替换原则/</id>
    <published>2015-02-04T14:34:39.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道面向对象有三大特性：封装、继承、多态。所以我们在实际开发过程中，子类在继承父类后，根据多态的特性，可能是图一时方便，经常任意重写父类的方法，那么这种方式会大大增加代码出问题的几率。比如下面场景：类C实现了某项功能F1。现在需要对功能F1作修改扩展，将功能F1扩展为F，其中F由原有的功能F1和新功能F2组成。新功能F由类C的子类C1来完成，则子类C1在完成功能F的同时，有可能会导致类C的原功能F1发生故障。这时候里氏替换原则就闪亮登场了。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/</a></p>
<h2 id="什么是里氏替换原则"><a href="#什么是里氏替换原则" class="headerlink" title="什么是里氏替换原则"></a>什么是里氏替换原则</h2><p>前面说过的单一职责原则，从字面意思就很好理解，但是里氏替换原则就有点让人摸不着头脑。查过资料后发现原来这项原则最早是在1988年，由麻省理工学院一位姓里的女士（Liskov）提出来的。</p>
<p>英文缩写：LSP (Liskov Substitution Principle)。</p>
<p>严格的定义：如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都换成o2时，程序P的行为没有变化，那么类型T2是类型T1的子类型。 </p>
<p>通俗的定义：所有引用基类的地方必须能透明地使用其子类的对象。</p>
<p>更通俗的定义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>
<p>代码示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象父类电脑</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBM</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"use IBM Computer."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HP</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"use HP Computer."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Computer ibm = <span class="keyword">new</span> IBM();</div><div class="line">        Computer hp = <span class="keyword">new</span> HP();<span class="comment">//引用基类的地方能透明地使用其子类的对象。</span></div><div class="line">         </div><div class="line">        ibm.use();</div><div class="line">        hp.use();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四层含义"><a href="#四层含义" class="headerlink" title="四层含义"></a>四层含义</h2><p>里氏替换原则包含以下4层含义：</p>
<ul>
<li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。</li>
<li>子类中可以增加自己特有的方法。</li>
<li>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>
<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。<br>　　<br>现在我们可以对以上四层含义逐个讲解。</li>
</ul>
<h3 id="子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法"><a href="#子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法" class="headerlink" title="子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法"></a>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</h3><p>在我们做系统设计时，经常会设计接口或抽象类，然后由子类来实现抽象方法，这里使用的其实就是里氏替换原则。子类可以实现父类的抽象方法很好理解，事实上，子类也必须完全实现父类的抽象方法，哪怕写一个空方法，否则会编译报错。</p>
<p>里氏替换原则的关键点在于不能覆盖父类的非抽象方法。父类中凡是已经实现好的方法，实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些规范，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p>
<p>在面向对象的设计思想中，继承这一特性为系统的设计带来了极大的便利性，但是由之而来的也潜在着一些风险。就像开篇所提到的那一场景一样，对于那种情况最好遵循里氏替换原则，类C1继承类C时，可以添加新方法完成新增功能，尽量不要重写父类C的方法。否则可能带来难以预料的风险，比如下面一个简单的例子还原开篇的场景：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a-b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        C c = <span class="keyword">new</span> C1();</div><div class="line">        System.out.println(<span class="string">"2+1="</span> + c.func(<span class="number">2</span>, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：2+1=1</p>
<p>上面的运行结果明显是错误的。类C1继承C，后来需要增加新功能，类C1并没有新写一个方法，而是直接重写了父类C的func方法，违背里氏替换原则，引用父类的地方并不能透明的使用子类的对象，导致运行结果出错。</p>
<h3 id="子类中可以增加自己特有的方法"><a href="#子类中可以增加自己特有的方法" class="headerlink" title="子类中可以增加自己特有的方法"></a>子类中可以增加自己特有的方法</h3><p>在继承父类属性和方法的同时，每个子类也都可以有自己的个性，在父类的基础上扩展自己的功能。前面其实已经提到，当功能扩展时，子类尽量不要重写父类的方法，而是另写一个方法，所以对上面的代码加以更改，使其符合里氏替换原则，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a-b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        C1 c = <span class="keyword">new</span> C1();</div><div class="line">        System.out.println(<span class="string">"2-1="</span> + c.func2(<span class="number">2</span>, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：2-1=1</p>
<h3 id="当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松"><a href="#当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松" class="headerlink" title="当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松"></a>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</h3><p>代码示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(HashMap m)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行父类..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(Map m)</span></span>&#123;<span class="comment">//方法的形参比父类的更宽松</span></div><div class="line">        System.out.println(<span class="string">"执行子类..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Father f = <span class="keyword">new</span> Son();<span class="comment">//引用基类的地方能透明地使用其子类的对象。</span></div><div class="line">        HashMap h = <span class="keyword">new</span> HashMap();</div><div class="line">        f.func(h);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：执行父类…</p>
<p>注意Son类的func方法前面是不能加@Override注解的，因为否则会编译提示报错，因为这并不是重写（Override），而是重载（Overload），因为方法的输入参数不同。重写和重载的区别在Java面向对象详解一文中已作解释，此处不再赘述。</p>
<h3 id="当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格"><a href="#当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格" class="headerlink" title="当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格"></a>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格</h3><p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Map <span class="title">func</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap <span class="title">func</span><span class="params">()</span></span>&#123;<span class="comment">//方法的返回值比父类的更严格</span></div><div class="line">        HashMap h = <span class="keyword">new</span> HashMap();</div><div class="line">        h.put(<span class="string">"h"</span>, <span class="string">"执行子类..."</span>);</div><div class="line">        <span class="keyword">return</span> h;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Father f = <span class="keyword">new</span> Son();<span class="comment">//引用基类的地方能透明地使用其子类的对象。</span></div><div class="line">        System.out.println(f.func());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：{h=执行子类…}</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了一些弊端，它增加了对象之间的耦合性。因此在系统设计时，遵循里氏替换原则，尽量避免子类重写父类的方法，可以有效降低代码出错的可能性。</p>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道面向对象有三大特性：封装、继承、多态。所以我们在实际开发过程中，子类在继承父类后，根据多态的特性，可能是图一时方便，经常任意重写父类的方法，那么这种方式会大大增加代码出问题的几率。比如下面场景：类C实现了某项功能F1。现在需要对功能F1作修改扩展，将功能F1扩展为F，其中F由原有的功能F1和新功能F2组成。新功能F由类C的子类C1来完成，则子类C1在完成功能F的同时，有可能会导致类C的原功能F1发生故障。这时候里氏替换原则就闪亮登场了。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式六大原则 - 单一职责原则</title>
    <link href="http://yoursite.com/2015/02/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2015/02/01/设计模式六大原则-单一职责原则/</id>
    <published>2015-02-01T09:56:35.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>初学者在编程的时候可能一开始会有这样的经历，使用一个类来实现很多的功能，新添加的甚至不相关的功能都放在一个类里来实现，煮成了一锅大杂烩，往往使得某个类包罗万象，无所不能。可能刚开始实现功能比较简单，这样做不会引发什么特别大的问题。但是随着项目复杂度的提升，各种不相关的实现代码耦合在一起，一旦有功能的更改或增删，修改的代码很可能会导致其他功能的正常运行。这种编程方式显然是不可取的，也就是违背了所谓的单一职责原则。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/</a></p>
<h2 id="什么是单一职责原则？"><a href="#什么是单一职责原则？" class="headerlink" title="什么是单一职责原则？"></a>什么是单一职责原则？</h2><p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。SRP原则的解释是：There should never be more than one reason for a class to change。定义很简单，即不能存在多于一个导致类变更的原因。简单的说就是一个类只负责一项职责。</p>
<p>在软件设计中，秉承着“高内聚，低耦合”的思想，让一个类仅负责一项职责，如果一个类有多于一项的职责，那么就代表这个类耦合性变高了，这些职责耦合在了一起，这是比较脆弱的设计。因为一旦某一项职责发生了改变，需要去更改代码，那么有可能会引起其他职责改变。所谓牵一发而动全身，这显然是我们所不愿意看到的，所以我们会把这个类分拆开来，由两个类来分别维护这两个职责，这样当一个职责发生改变，需要修改时，不会影响到另一个职责。</p>
<p>需要说明的是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。</p>
<h2 id="关于职责"><a href="#关于职责" class="headerlink" title="关于职责"></a>关于职责</h2><p>看到上面所述，或许有人会说这么简单谁不知道。的确，很多程序员即使没有学过设计模式，不知道单一职责原则，在编程的时候，在设计软件时也会有意识的遵循这一原则。因为谁都不希望修改一个地方会引发另外一个地方出现问题，而避免这种问题的最好处理方式就是设计时遵循单一职责原则。但是，我认为单一职责原则的难点是在于职责范围的认定。关于职责的认定是一个仁者见仁智者见智的话题，在实际开发中也会引起程序员之间的争论。有的人认为这些功能方法的实现目的很相似，必须要放在一个类中，有的人认为方法差别很大，必须要分拆成多个类，在多个类里面来实现。</p>
<p>还有职责的扩散问题。软件一开发完上线后并不是一成不变的，随着社会的进步，需求的变更，软件的功能可能要做些维护更改，有时候会遇到职责扩散。所谓的职责扩散就是因为某种原因，职责R被分化为粒度更细的R1和R2。</p>
<p>比如类C只负责一个职责R，这是符合单一职责原则的。但是后来需要把职责R拆分为职责R1和职责R2，那么这时候是否需要死守着单一职责原则，把类C也拆开为C1和C2。接着如果R1又需要细化为R11和R12呢……</p>
<p>我们必须要意识到，一味的遵守单一职责原则，不停的分拆类所付出的开销是很大的。这时候就涉及到平衡的问题，平衡单一职责原则与修改造成的开销。我的观点是如果一个方法逻辑不复杂的情况下，可以修改方法实现，否则要拆分为两个方法，遵循方法级别的单一职责原则；如果一个类方法不多的情况下，可以只增加方法，而不用分拆为多个类，否则要拆分为多个类，遵循类级别的单一职责原则。</p>
<h2 id="遵循单一职责原则的优点"><a href="#遵循单一职责原则的优点" class="headerlink" title="遵循单一职责原则的优点"></a>遵循单一职责原则的优点</h2><ul>
<li>降低了类的复杂度。一个类只负责一项职责比负责多项职责要简单得多。</li>
<li>提高了代码的可读性。一个类简单了，可读性自然就提高了。</li>
<li>提高了系统的可维护性。代码的可读性高了，并且修改一项职责对其他职责影响降低了，可维护性自然就提高了。</li>
<li>变更引起的风险变低了。单一职责最大的优点就是修改一个功能，对其他功能的影响显著降低。</li>
</ul>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/</a></p>
<p>转载请注明作者及出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学者在编程的时候可能一开始会有这样的经历，使用一个类来实现很多的功能，新添加的甚至不相关的功能都放在一个类里来实现，煮成了一锅大杂烩，往往使得某个类包罗万象，无所不能。可能刚开始实现功能比较简单，这样做不会引发什么特别大的问题。但是随着项目复杂度的提升，各种不相关的实现代码耦合在一起，一旦有功能的更改或增删，修改的代码很可能会导致其他功能的正常运行。这种编程方式显然是不可取的，也就是违背了所谓的单一职责原则。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>使用JXL组件操作Excel和导出文件</title>
    <link href="http://yoursite.com/2015/01/29/%E4%BD%BF%E7%94%A8JXL%E7%BB%84%E4%BB%B6%E6%93%8D%E4%BD%9CExcel%E5%92%8C%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2015/01/29/使用JXL组件操作Excel和导出文件/</id>
    <published>2015-01-29T08:29:57.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间参与的项目要求做几张Excel报表，由于项目框架使用了jxl组件，所以把jxl组件的详细用法归纳总结一下。本文主要讲述了以下内容：</p>
<ul>
<li>JXL及相关工具简介</li>
<li>如何安装JXL</li>
<li>JXL的基本操作<ul>
<li>创建文件</li>
<li>单元格操作<ul>
<li>合并单元格</li>
<li>行高和列宽</li>
</ul>
</li>
<li>数据格式化<ul>
<li>字符串格式化</li>
<li>对齐方式</li>
</ul>
</li>
<li>读取文件</li>
<li>修改文件</li>
</ul>
</li>
<li>导出文件实例</li>
</ul>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>jxl是一个韩国人写的java操作excel的工具, 在开源世界中，有两套比较有影响的API可供使用，一个是POI，一个是jExcelAPI。其中jExcelAPI功能相对POI比较弱一点。但jExcelAPI对中文支持非常好，API是纯Java的，并不依赖Windows系统，即使运行在Linux下，它同样能够正确的处理Excel文件。另外需要说明的是，这套API对图形和图表的支持很有限，而且仅仅识别PNG格式。</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>网上下载jxl.jar包，然后导入工程项目lib中，即可使用。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>以下实例是生成一个名为“test.xls”的Excel文件，其中第一个工作表被命名为“第一页”。编译执行后，会产生一个Excel文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生成Excel的类 </span></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jxl.Workbook;</div><div class="line"><span class="keyword">import</span> jxl.write.Label;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableSheet;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateExcel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 打开文件</span></div><div class="line">            WritableWorkbook book = Workbook.createWorkbook(<span class="keyword">new</span> File(<span class="string">"c:/test.xls"</span>));</div><div class="line">            <span class="comment">// 生成名为“第一页”的工作表，参数0表示这是第一页</span></div><div class="line">            WritableSheet sheet = book.createSheet(<span class="string">" 第一页 "</span>, <span class="number">0</span>);</div><div class="line">            <span class="comment">// 在Label对象的构造子中指名单元格位置是第一列第一行(0,0)</span></div><div class="line">            <span class="comment">// 以及单元格内容为test</span></div><div class="line">            Label label = <span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">" test "</span>);</div><div class="line">            <span class="comment">// 将定义好的单元格添加到工作表中</span></div><div class="line">            sheet.addCell(label);</div><div class="line"></div><div class="line">            <span class="comment">// 生成一个保存数字的单元格，必须使用Number的完整包路径，否则有语法歧义。</span></div><div class="line">            <span class="comment">//单元格位置是第二列，第一行，值为123.456</span></div><div class="line">            jxl.write.Number number = <span class="keyword">new</span> jxl.write.Number(<span class="number">1</span>, <span class="number">0</span>, <span class="number">123.456</span>);</div><div class="line">            sheet.addCell(number);</div><div class="line"></div><div class="line">            <span class="comment">// 写入数据并关闭文件</span></div><div class="line">            book.write();</div><div class="line">            book.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><p>Excel中很重要的一部分是对单元格的操作，比如行高、列宽、单元格合并等，所幸jExcelAPI提供了这些支持。这些操作相对比较简单，下面只介绍一下相关的API。</p>
<h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>合并既可以是横向的，也可以是纵向的。合并后的单元格不能再次进行合并，否则会触发异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法作用是从(m,n)到(p,q)的单元格全部合并</span></div><div class="line">WritableSheet.mergeCells( <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> p, <span class="keyword">int</span> q);</div><div class="line"></div><div class="line"><span class="comment">// 合并第1列第1行到第3列第4行的所有单元格</span></div><div class="line">sheet.mergeCells(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">// 先合并单元格，再添加内容。并且定义的列行方位在合并的单元格第一个列行方位，否则添加不上内容，如下所示：</span></div><div class="line">Label label = <span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">" 测试 "</span>);</div><div class="line">sheet.addCell(label);</div></pre></td></tr></table></figure>
<h4 id="行高和列宽"><a href="#行高和列宽" class="headerlink" title="行高和列宽"></a>行高和列宽</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 作用是指定第i+1行的高度</span></div><div class="line">WritableSheet.setRowView( <span class="keyword">int</span> i, <span class="keyword">int</span> height);</div><div class="line"></div><div class="line"><span class="comment">// 将第一行的高度设为200</span></div><div class="line">sheet.setRowView(<span class="number">0</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">// 作用是指定第i+1列的宽度</span></div><div class="line">WritableSheet.setColumnView( <span class="keyword">int</span> i, <span class="keyword">int</span> width);</div><div class="line"></div><div class="line"><span class="comment">// 将第一列的宽度设为30</span></div><div class="line">sheet.setColumnView(<span class="number">0</span>, <span class="number">30</span>);</div></pre></td></tr></table></figure>
<h3 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h3><h4 id="字串格式化"><a href="#字串格式化" class="headerlink" title="字串格式化"></a>字串格式化</h4><p>字符串的格式化涉及到的是字体、粗细、字号等元素，这些功能主要由WritableFont和WritableCellFormat类来负责。</p>
<p>WritableFont有非常丰富的构造子方法，供不同情况下使用，jExcelAPI的java-doc中有详细列表，这里不再列出。</p>
<p>WritableCellFormat类非常重要，通过它可以指定单元格的各种属性，后面的单元格格式化中会有更多描述。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字体样式：宋体；11号；粗体</span></div><div class="line">WritableFont font1 = <span class="keyword">new</span> WritableFont(WritableFont.createFont(<span class="string">"宋体"</span>), <span class="number">11</span>, WritableFont.BOLD);</div><div class="line">WritableCellFormat format1 = <span class="keyword">new</span>  WritableCellFormat(font1);</div><div class="line">Label label = <span class="keyword">new</span>  Label( <span class="number">0</span> , <span class="number">0</span> , <span class="string">"test"</span>, format1);</div></pre></td></tr></table></figure>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>在WritableCellFormat类中，还有一个很重要的方法是指定数据的对齐方式，比如针对我们上面的实例，可以指定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把水平对齐方式指定为居中 </span></div><div class="line">format1.setAlignment(jxl.format.Alignment.CENTRE);</div><div class="line"><span class="comment">// 把垂直对齐方式指定为居中 </span></div><div class="line">format1.setVerticalAlignment(jxl.format.VerticalAlignment.CENTRE);</div></pre></td></tr></table></figure>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读取Excel的类 </span></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jxl.Cell;</div><div class="line"><span class="keyword">import</span> jxl.Sheet;</div><div class="line"><span class="keyword">import</span> jxl.Workbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadExcel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Workbook book = Workbook.getWorkbook(<span class="keyword">new</span> File(<span class="string">"c:/test.xls"</span>));</div><div class="line">            <span class="comment">// 获得第一个工作表对象</span></div><div class="line">            Sheet sheet = book.getSheet(<span class="number">0</span>);</div><div class="line">            <span class="comment">// 得到第一列第一行的单元格</span></div><div class="line">            Cell cell = sheet.getCell(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            String contents = cell.getContents();<span class="comment">//得到单元格内容</span></div><div class="line">            System.out.println(contents);</div><div class="line">            book.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序的输出结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test</div></pre></td></tr></table></figure>
<p>Cell接口的方法还可以获取单元格行、列位置，单元格是否隐藏等属性。具体的参考jxl的API。</p>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>修改Excel文件除了打开文件的方式不同之外，其他与创建Excel是一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改Excel的类 </span></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jxl.Workbook;</div><div class="line"><span class="keyword">import</span> jxl.write.Label;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableSheet;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateExcel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 获得Excel文件</span></div><div class="line">            Workbook wb = Workbook.getWorkbook(<span class="keyword">new</span> File(<span class="string">"c:/test.xls"</span>));</div><div class="line">            <span class="comment">// 打开一个文件的副本，并且指定数据写回到原文件</span></div><div class="line">            WritableWorkbook book = Workbook.createWorkbook(<span class="keyword">new</span> File(<span class="string">"c:/test.xls"</span>), wb);</div><div class="line">            </div><div class="line">            <span class="comment">//修改原工作表数据</span></div><div class="line">            WritableSheet sheet1 = book.getSheet(<span class="number">0</span>);</div><div class="line">            sheet1.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"覆盖原来的test"</span>));</div><div class="line">            </div><div class="line">            <span class="comment">// 添加一个新工作表</span></div><div class="line">            WritableSheet sheet2 = book.createSheet(<span class="string">" 第二页 "</span>, <span class="number">1</span>);</div><div class="line">            sheet2.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">" 第二页的测试数据 "</span>));</div><div class="line">            </div><div class="line">            book.write();</div><div class="line">            book.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h2><p>附上一个导出文件例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/** 报表导出按钮 */</span></div><div class="line">    $( <span class="string">'#exportBtn'</span> ).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>( !$( <span class="string">'#frm'</span> ).validationEngine( <span class="string">'validate'</span> ) )</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        $( <span class="string">'#frm'</span> )[ <span class="number">0</span> ].action = <span class="string">'$&#123;ctx &#125;/exportAction.do?m=exportExcel'</span>;</div><div class="line">        $( <span class="string">'#frm'</span> )[ <span class="number">0</span> ].submit();</div><div class="line">        $( <span class="keyword">this</span> ).attr( <span class="string">'disabled'</span>, <span class="literal">true</span> );</div><div class="line">        <span class="built_in">window</span>.setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.getElementById( <span class="string">'exportBtn'</span> ).disabled = <span class="literal">false</span>;</div><div class="line">        &#125;, <span class="number">5000</span> );</div><div class="line">    &#125; );</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 根据浏览器类型，转换为当前浏览器支持的中文*/</span></div><div class="line">String fileName = <span class="string">"Excel工作表"</span>;</div><div class="line"></div><div class="line"><span class="comment">/** header 浏览器key */</span></div><div class="line">String userAgent = request.getHeader(<span class="string">"USER-AGENT"</span>).toUpperCase();</div><div class="line"><span class="keyword">if</span> (userAgent != <span class="keyword">null</span> &amp;&amp; userAgent.length() != <span class="number">0</span> &amp;&amp; fileName != <span class="keyword">null</span> &amp;&amp; fileName.length() != <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">/** header IE */</span></div><div class="line">    <span class="keyword">if</span> ( -<span class="number">1</span> != userAgent.indexOf(<span class="string">"MSIE"</span>) )</div><div class="line">        fileName = URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>);</div><div class="line">    <span class="comment">/** header Mozilla */</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( -<span class="number">1</span> != userAgent.indexOf(<span class="string">"MOZILLA"</span>) )</div><div class="line">        fileName = <span class="keyword">new</span> String(fileName.getBytes(), <span class="string">"ISO8859-1"</span>);</div><div class="line">    <span class="comment">/** header Safari */</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( -<span class="number">1</span> != userAgent.indexOf(<span class="string">"SAFARI"</span>) )</div><div class="line">        fileName = <span class="keyword">new</span> String( fileName.getBytes(), <span class="string">"ISO8859-1"</span>);</div><div class="line">    <span class="comment">/** header Opera */</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( -<span class="number">1</span> != userAgent.indexOf(<span class="string">"OPERA"</span>) )</div><div class="line">        fileName = <span class="keyword">new</span> String( fileName.getBytes(), <span class="string">"ISO8859-1"</span>);</div><div class="line">    <span class="comment">/** header 其它内核浏览器 */</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        fileName = <span class="keyword">new</span> String( fileName.getBytes(), <span class="string">"ISO8859-1"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</div><div class="line">response.setHeader(<span class="string">"Content-disposition"</span>, <span class="keyword">new</span> StringBuffer(<span class="string">"attachment"</span>).append( <span class="string">";filename="</span> ).append( fileName ).append(<span class="string">".xls"</span>).toString() );</div><div class="line"></div><div class="line">WritableWorkbook book = Workbook.createWorkbook(response.getOutputStream());</div><div class="line">WritableSheet sheet = book.createSheet(<span class="string">"Excel工作表"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line">book.write();</div><div class="line">book.close();</div></pre></td></tr></table></figure>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间参与的项目要求做几张Excel报表，由于项目框架使用了jxl组件，所以把jxl组件的详细用法归纳总结一下。本文主要讲述了以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JXL及相关工具简介&lt;/li&gt;
&lt;li&gt;如何安装JXL&lt;/li&gt;
&lt;li&gt;JXL的基本操作&lt;ul&gt;
&lt;li&gt;创建文件&lt;/li&gt;
&lt;li&gt;单元格操作&lt;ul&gt;
&lt;li&gt;合并单元格&lt;/li&gt;
&lt;li&gt;行高和列宽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据格式化&lt;ul&gt;
&lt;li&gt;字符串格式化&lt;/li&gt;
&lt;li&gt;对齐方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读取文件&lt;/li&gt;
&lt;li&gt;修改文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;导出文件实例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的Listener 监听器</title>
    <link href="http://yoursite.com/2015/01/27/Java%E4%B8%AD%E7%9A%84Listener-%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://yoursite.com/2015/01/27/Java中的Listener-监听器/</id>
    <published>2015-01-27T07:36:14.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了Listener以下几个方面的内容：</p>
<ul>
<li>Listener的定义与作用</li>
<li>Listener的分类与使用<ul>
<li>ServletContext监听</li>
<li>Session监听</li>
<li>Request监听</li>
</ul>
</li>
<li>Listener的应用实例<ul>
<li>利用HttpSessionListener统计最多在线用户人数</li>
<li>Spring使用ContextLoaderListener加载ApplicationContext配置信息</li>
<li>Spring使用Log4jConfigListener配置Log4j日志</li>
<li>Spring使用IntrospectorCleanupListener清理缓存</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/27/java-listener/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/27/java-listener/</a></p>
<p><a href="http://tianweili.github.io/blog/2015/01/26/java-filter/" target="_blank" rel="external">之前写了一篇关于Filter的文章</a>，现在再来一篇Listener的，Filter和Listener在项目中是经常用到的，巧妙的使用可以达到事半功倍的效果。故把两者的用法总结一下。</p>
<h2 id="Listener的定义与作用"><a href="#Listener的定义与作用" class="headerlink" title="Listener的定义与作用"></a>Listener的定义与作用</h2><p>监听器Listener就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。</p>
<p>Listener是Servlet的监听器，可以监听客户端的请求，服务端的操作等。</p>
<h2 id="Listener的分类与使用"><a href="#Listener的分类与使用" class="headerlink" title="Listener的分类与使用"></a>Listener的分类与使用</h2><p>主要有以下三类：</p>
<h3 id="ServletContext监听"><a href="#ServletContext监听" class="headerlink" title="ServletContext监听"></a>ServletContext监听</h3><p>ServletContextListener：用于对Servlet整个上下文进行监听（创建、销毁）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上下文初始化</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span></span>;</div><div class="line"><span class="comment">//上下文销毁</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span></span>;</div><div class="line"><span class="comment">//ServletContextEvent事件：取得一个ServletContext（application）对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>ServletContextAttributeListener：对Servlet上下文属性的监听（增删改属性）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//增加属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent scab)</span></span>;</div><div class="line"><span class="comment">//属性删除</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scab)</span></span>;</div><div class="line"><span class="comment">//属性替换（第二次设置同一属性）</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRepalced</span><span class="params">(ServletContextAttributeEvent scab)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//ServletContextAttributeEvent事件：能取得设置属性的名称与内容</span></div><div class="line"><span class="comment">//得到属性名称</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//取得属性的值</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="Session监听"><a href="#Session监听" class="headerlink" title="Session监听"></a>Session监听</h3><p>Session属于http协议下的内容，接口位于javax.servlet.http.*包下。</p>
<p>HttpSessionListener接口：对Session的整体状态的监听。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//session创建</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span></span>;</div><div class="line"><span class="comment">//session销毁</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//HttpSessionEvent事件：</span></div><div class="line"><span class="comment">//取得当前操作的session</span></div><div class="line"><span class="function"><span class="keyword">public</span> HttpSession <span class="title">getSession</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>HttpSessionAttributeListener接口：对session的属性监听。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span></span>;<span class="comment">//增加属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span></span>;<span class="comment">//删除属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span></span>;<span class="comment">//替换属性</span></div><div class="line"></div><div class="line"><span class="comment">//HttpSessionBindingEvent事件：</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//取得属性的名称</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span></span>;<span class="comment">//取得属性的值</span></div><div class="line"><span class="function"><span class="keyword">public</span> HttpSession <span class="title">getSession</span><span class="params">()</span></span>;<span class="comment">//取得当前的session</span></div></pre></td></tr></table></figure>
<p>session的销毁有两种情况：</p>
<p>1.session超时，web.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>120<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span><span class="comment">&lt;!--session120分钟后超时销毁--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2.手工使session失效</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使session失效方法。session.invalidate();</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="Request监听"><a href="#Request监听" class="headerlink" title="Request监听"></a>Request监听</h3><p>ServletRequestListener：用于对Request请求进行监听（创建、销毁）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span></span>;<span class="comment">//request初始化</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span></span>;<span class="comment">//request销毁</span></div><div class="line"></div><div class="line"><span class="comment">//ServletRequestEvent事件：</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletRequest <span class="title">getServletRequest</span><span class="params">()</span></span>;<span class="comment">//取得一个ServletRequest对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;<span class="comment">//取得一个ServletContext（application）对象</span></div></pre></td></tr></table></figure>
<p>ServletRequestAttributeListener：对Request属性的监听（增删改属性）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span></span>;<span class="comment">//增加属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span></span>;<span class="comment">//属性删除</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span></span>;<span class="comment">//属性替换（第二次设置同一属性）</span></div><div class="line"></div><div class="line"><span class="comment">//ServletRequestAttributeEvent事件：能取得设置属性的名称与内容</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//得到属性名称</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span></span>;<span class="comment">//取得属性的值</span></div></pre></td></tr></table></figure>
<h3 id="在web-xml中配置"><a href="#在web-xml中配置" class="headerlink" title="在web.xml中配置"></a>在web.xml中配置</h3><p>Listener配置信息必须在Filter和Servlet配置之前，Listener的初始化（ServletContentListener初始化）比Servlet和Filter都优先，而销毁比Servlet和Filter都慢。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.listener.class<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Listener应用实例"><a href="#Listener应用实例" class="headerlink" title="Listener应用实例"></a>Listener应用实例</h2><h3 id="利用HttpSessionListener统计最多在线用户人数"><a href="#利用HttpSessionListener统计最多在线用户人数" class="headerlink" title="利用HttpSessionListener统计最多在线用户人数"></a>利用HttpSessionListener统计最多在线用户人数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionListenerImpl</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        ServletContext app = event.getSession().getServletContext();</div><div class="line">        <span class="keyword">int</span> count = Integer.parseInt(app.getAttribute(<span class="string">"onLineCount"</span>).toString());</div><div class="line">        count++;</div><div class="line">        app.setAttribute(<span class="string">"onLineCount"</span>, count);</div><div class="line">        <span class="keyword">int</span> maxOnLineCount = Integer.parseInt(app.getAttribute(<span class="string">"maxOnLineCount"</span>).toString());</div><div class="line">        <span class="keyword">if</span> (count &gt; maxOnLineCount) &#123;</div><div class="line">            <span class="comment">//记录最多人数是多少</span></div><div class="line">            app.setAttribute(<span class="string">"maxOnLineCount"</span>, count);</div><div class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">            <span class="comment">//记录在那个时刻达到上限</span></div><div class="line">            app.setAttribute(<span class="string">"date"</span>, df.format(<span class="keyword">new</span> Date()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//session注销、超时时候调用，停止tomcat不会调用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        ServletContext app = event.getSession().getServletContext();</div><div class="line">        <span class="keyword">int</span> count = Integer.parseInt(app.getAttribute(<span class="string">"onLineCount"</span>).toString());</div><div class="line">        count--;</div><div class="line">        app.setAttribute(<span class="string">"onLineCount"</span>, count);    </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spring使用ContextLoaderListener加载ApplicationContext配置信息"><a href="#Spring使用ContextLoaderListener加载ApplicationContext配置信息" class="headerlink" title="Spring使用ContextLoaderListener加载ApplicationContext配置信息"></a>Spring使用ContextLoaderListener加载ApplicationContext配置信息</h3><p>ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。</p>
<p>ContextLoaderListener如何查找ApplicationContext.xml的配置位置以及配置多个xml：如果在web.xml中不写任何参数配置信息，默认的路径是”/WEB-INF/applicationContext.xml”，在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml（在MyEclipse中把xml文件放置在src目录下）。如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!-- 采用的是通配符方式，查找WEB-INF/spring目录下xml文件。如有多个xml文件，以“,”分隔。 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring使用Log4jConfigListener配置Log4j日志"><a href="#Spring使用Log4jConfigListener配置Log4j日志" class="headerlink" title="Spring使用Log4jConfigListener配置Log4j日志"></a>Spring使用Log4jConfigListener配置Log4j日志</h3><p>Spring使用Log4jConfigListener的好处：</p>
<ul>
<li>动态的改变记录级别和策略，不需要重启Web应用。</li>
<li>把log文件定在 /WEB-INF/logs/ 而不需要写绝对路径。因为系统把web目录的路径压入一个叫webapp.root的系统变量。这样写log文件路径时不用写绝对路径了。</li>
<li>可以把log4j.properties和其他properties一起放在/WEB-INF/ ，而不是Class-Path。</li>
<li>设置log4jRefreshInterval时间，开一条watchdog线程每隔段时间扫描一下配置文件的变化。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>webAppRootKey<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>project.root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!-- 用于定位log文件输出位置在web应用根目录下，log4j配置文件中写输出位置：log4j.appender.FILE.File=$&#123;project.root&#125;/logs/project.log --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!-- 载入log4j配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jRefreshInterval<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!--Spring刷新Log4j配置文件的间隔60秒,单位为millisecond--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring使用IntrospectorCleanupListener清理缓存"><a href="#Spring使用IntrospectorCleanupListener清理缓存" class="headerlink" title="Spring使用IntrospectorCleanupListener清理缓存"></a>Spring使用IntrospectorCleanupListener清理缓存</h3><p>这个监听器的作用是在web应用关闭时刷新JDK的JavaBeans的Introspector缓存，以确保Web应用程序的类加载器以及其加载的类正确的释放资源。</p>
<p>如果JavaBeans的Introspector已被用来分析应用程序类，系统级的Introspector缓存将持有这些类的一个硬引用。因此，这些类和Web应用程序的类加载器在Web应用程序关闭时将不会被垃圾收集器回收！而IntrospectorCleanupListener则会对其进行适当的清理，已使其能够被垃圾收集器回收。</p>
<p>唯一能够清理Introspector的方法是刷新整个Introspector缓存，没有其他办法来确切指定应用程序所引用的类。这将删除所有其他应用程序在服务器的缓存的Introspector结果。</p>
<p>在使用Spring内部的bean机制时，不需要使用此监听器，因为Spring自己的introspection results cache将会立即刷新被分析过的JavaBeans Introspector cache，而仅仅会在应用程序自己的ClassLoader里面持有一个cache。虽然Spring本身不产生泄漏，注意，即使在Spring框架的类本身驻留在一个“共同”类加载器（如系统的ClassLoader）的情况下，也仍然应该使用使用IntrospectorCleanupListener。在这种情况下，这个IntrospectorCleanupListener将会妥善清理Spring的introspection cache。</p>
<p>应用程序类，几乎不需要直接使用JavaBeans Introspector，所以，通常都不是Introspector resource造成内存泄露。相反，许多库和框架，不清理Introspector，例如： Struts和Quartz。</p>
<p>需要注意的是一个简单Introspector泄漏将会导致整个Web应用程序的类加载器不会被回收！这样做的结果，将会是在web应用程序关闭时，该应用程序所有的静态类资源（比如：单实例对象）都没有得到释放。而导致内存泄露的根本原因其实并不是这些未被回收的类！</p>
<p>注意：IntrospectorCleanupListener应该注册为web.xml中的第一个Listener，在任何其他Listener之前注册，比如在Spring’s ContextLoaderListener注册之前，才能确保IntrospectorCleanupListener在Web应用的生命周期适当时机生效。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="comment">&lt;!-- memory clean --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/27/java-listener/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/27/java-listener/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Listener以下几个方面的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listener的定义与作用&lt;/li&gt;
&lt;li&gt;Listener的分类与使用&lt;ul&gt;
&lt;li&gt;ServletContext监听&lt;/li&gt;
&lt;li&gt;Session监听&lt;/li&gt;
&lt;li&gt;Request监听&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Listener的应用实例&lt;ul&gt;
&lt;li&gt;利用HttpSessionListener统计最多在线用户人数&lt;/li&gt;
&lt;li&gt;Spring使用ContextLoaderListener加载ApplicationContext配置信息&lt;/li&gt;
&lt;li&gt;Spring使用Log4jConfigListener配置Log4j日志&lt;/li&gt;
&lt;li&gt;Spring使用IntrospectorCleanupListener清理缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的Filter 过滤器</title>
    <link href="http://yoursite.com/2015/01/26/Java%E4%B8%AD%E7%9A%84Filter-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yoursite.com/2015/01/26/Java中的Filter-过滤器/</id>
    <published>2015-01-26T09:07:51.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要详细介绍了Filter的以下几个方面内容：</p>
<ul>
<li>Filter概念介绍</li>
<li>Filter的用途</li>
<li>如何借助Filter实现拦截功能</li>
<li>Filter的开发步骤和配置详解</li>
<li>Filter链</li>
<li>Filter的生命周期</li>
<li>Filter的使用案例<ul>
<li>使用Filter验证用户登录安全控制</li>
<li>防止中文乱码过滤器</li>
<li>Spring+Hibernate的OpenSessionInViewFilter控制session的开关</li>
<li>Struts2的web.xml配置</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/26/java-filter/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/26/java-filter/</a></p>
<h2 id="Filter简介"><a href="#Filter简介" class="headerlink" title="Filter简介"></a>Filter简介</h2><p>Filter也称之为过滤器，它是Servlet技术中最实用的技术，WEB开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p>
<p>它主要用于对用户请求进行预处理，也可以对HttpServletResponse 进行后处理。使用Filter 的完整流程：Filter 对用户请求进行预处理，接着将请求交给Servlet 进行处理并生成响应，最后Filter 再对服务器响应进行后处理。</p>
<h2 id="Filter功能"><a href="#Filter功能" class="headerlink" title="Filter功能"></a>Filter功能</h2><ul>
<li>在HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest 。根据需要检查 HttpServletRequest ，也可以修改HttpServletRequest 头和数据。</li>
<li>在HttpServletResponse 到达客户端之前，拦截HttpServletResponse 。根据需要检查 HttpServletResponse ，也可以修改HttpServletResponse头和数据。</li>
</ul>
<h2 id="如何借助Filter实现拦截功能"><a href="#如何借助Filter实现拦截功能" class="headerlink" title="如何借助Filter实现拦截功能"></a>如何借助Filter实现拦截功能</h2><p>Filter接口中有一个doFilter方法，当开发人员编写好Filter，并配置对哪个web资源进行拦截后，WEB服务器每次在调用web资源的service方法之前，都会先调用一下filter的doFilter方法，因此，在该方法内编写代码可达到如下目的：</p>
<ul>
<li>调用目标资源之前，让一段代码执行。</li>
<li>是否调用目标资源（即是否让用户访问web资源）。</li>
</ul>
<p>web服务器在调用doFilter方法时，会传递一个filterChain对象进来，<strong>filterChain对象是filter接口中最重要的一个对象</strong>，它也提供了一个doFilter方法，开发人员可以根据需求决定是否调用此方法，调用该方法，则web服务器就会调用web资源的service方法，即web资源就会被访问，否则web资源不会被访问。</p>
<h2 id="Filter开发两步走"><a href="#Filter开发两步走" class="headerlink" title="Filter开发两步走"></a>Filter开发两步走</h2><ol>
<li>编写java类实现Filter接口，并实现其doFilter方法。</li>
<li>在 web.xml 文件中使用<filter>和<filter-mapping>元素对编写的filter类进行注册，并设置它所能拦截的资源。</filter-mapping></filter></li>
</ol>
<p>web.xml配置各节点介绍：</p>
<ul>
<li><code>&lt;filter&gt;</code>指定一个过滤器。<ul>
<li><code>&lt;filter-name&gt;</code>用于为过滤器指定一个名字，该元素的内容不能为空。</li>
<li><code>&lt;filter-class&gt;</code>元素用于指定过滤器的完整的限定类名。</li>
<li><code>&lt;init-param&gt;</code>元素用于为过滤器指定初始化参数，它的子元素<code>&lt;param-name&gt;</code>指定参数的名字，<code>&lt;param-value&gt;</code>指定参数的值。</li>
<li>在过滤器中，可以使用<code>FilterConfig</code>接口对象来访问初始化参数。</li>
</ul>
</li>
<li><code>&lt;filter-mapping&gt;</code>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径 <ul>
<li><code>&lt;filter-name&gt;</code>子元素用于设置filter的注册名称。该值必须是在<code>&lt;filter&gt;</code>元素中声明过的过滤器的名字 </li>
<li><code>&lt;url-pattern&gt;</code>设置 filter 所拦截的请求路径(过滤器关联的URL样式) </li>
</ul>
</li>
<li><code>&lt;servlet-name&gt;</code>指定过滤器所拦截的Servlet名称。 </li>
<li><code>&lt;dispatcher&gt;</code>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是<code>REQUEST</code>,<code>INCLUDE</code>,<code>FORWARD</code>和<code>ERROR</code>之一，默认<code>REQUEST</code>。用户可以设置多个<code>&lt;dispatcher&gt;</code>子元素用来指定 Filter 对资源的多种调用方式进行拦截。 </li>
<li><code>&lt;dispatcher&gt;</code>子元素可以设置的值及其意义<ul>
<li><code>REQUEST</code>：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。 </li>
<li><code>INCLUDE</code>：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。 </li>
<li><code>FORWARD</code>：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。 </li>
<li><code>ERROR</code>：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li>
</ul>
</li>
</ul>
<h2 id="Filter链"><a href="#Filter链" class="headerlink" title="Filter链"></a>Filter链</h2><p>在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。</p>
<p><strong>web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter</strong>，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p>
<h2 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException</span>;<span class="comment">//初始化</span></div></pre></td></tr></table></figure>
<p>和我们编写的Servlet程序一样，Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（<strong>filter对象只会创建一次，init方法也只会执行一次</strong>）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span>;<span class="comment">//拦截请求</span></div></pre></td></tr></table></figure>
<p>这个方法完成实际的过滤操作。当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;<span class="comment">//销毁</span></div></pre></td></tr></table></figure>
<p>Filter对象创建后会驻留在内存，当web应用移除或服务器停止时才销毁。在Web容器卸载 Filter 对象之前被调用。该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p>
<h2 id="FilterConfig接口"><a href="#FilterConfig接口" class="headerlink" title="FilterConfig接口"></a>FilterConfig接口</h2><p>用户在配置filter时，可以使用<init-param>为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得以下内容：</init-param></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getFilterName</span><span class="params">()</span></span>;<span class="comment">//得到filter的名称。 </span></div><div class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>;<span class="comment">//返回在部署描述中指定名称的初始化参数的值。如果不存在返回null. </span></div><div class="line"><span class="function">Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span></span>;<span class="comment">//返回过滤器的所有初始化参数的名字的枚举集合。 </span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;<span class="comment">//返回Servlet上下文对象的引用。</span></div></pre></td></tr></table></figure>
<h2 id="Filter使用案例"><a href="#Filter使用案例" class="headerlink" title="Filter使用案例"></a>Filter使用案例</h2><h3 id="使用Filter验证用户登录安全控制"><a href="#使用Filter验证用户登录安全控制" class="headerlink" title="使用Filter验证用户登录安全控制"></a>使用Filter验证用户登录安全控制</h3><p>前段时间参与维护一个项目，用户退出系统后，再去地址栏访问历史，根据url，仍然能够进入系统响应页面。我去检查一下发现对请求未进行过滤验证用户登录。添加一个filter搞定问题！</p>
<p>先在web.xml配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SessionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.action.login.SessionFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logonStrings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- 对登录页面不进行过滤 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/project/index.jsp;login.do<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>includeStrings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- 只对指定过滤参数后缀进行过滤 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.do;.jsp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>redirectPath<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- 未通过跳转到登录界面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>disabletestfilter<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- Y:过滤无效 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>N<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SessionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接着编写<code>FilterServlet.java</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.action.login;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *    判断用户是否登录,未登录则退出系统</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> FilterConfig config;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.config = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isContains</span><span class="params">(String container, String[] regx)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; regx.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (container.indexOf(regx[i]) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest hrequest = (HttpServletRequest)request;</div><div class="line">        HttpServletResponseWrapper wrapper = <span class="keyword">new</span> HttpServletResponseWrapper((HttpServletResponse) response);</div><div class="line">        </div><div class="line">        String logonStrings = config.getInitParameter(<span class="string">"logonStrings"</span>);        <span class="comment">// 登录登陆页面</span></div><div class="line">        String includeStrings = config.getInitParameter(<span class="string">"includeStrings"</span>);    <span class="comment">// 过滤资源后缀参数</span></div><div class="line">        String redirectPath = hrequest.getContextPath() + config.getInitParameter(<span class="string">"redirectPath"</span>);<span class="comment">// 没有登陆转向页面</span></div><div class="line">        String disabletestfilter = config.getInitParameter(<span class="string">"disabletestfilter"</span>);<span class="comment">// 过滤器是否有效</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (disabletestfilter.toUpperCase().equals(<span class="string">"Y"</span>)) &#123;    <span class="comment">// 过滤无效</span></div><div class="line">            chain.doFilter(request, response);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        String[] logonList = logonStrings.split(<span class="string">";"</span>);</div><div class="line">        String[] includeList = includeStrings.split(<span class="string">";"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isContains(hrequest.getRequestURI(), includeList)) &#123;<span class="comment">// 只对指定过滤参数后缀进行过滤</span></div><div class="line">            chain.doFilter(request, response);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isContains(hrequest.getRequestURI(), logonList)) &#123;<span class="comment">// 对登录页面不进行过滤</span></div><div class="line">            chain.doFilter(request, response);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String user = ( String ) hrequest.getSession().getAttribute(<span class="string">"useronly"</span>);<span class="comment">//判断用户是否登录</span></div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            wrapper.sendRedirect(redirectPath);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            chain.doFilter(request, response);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        config = filterConfig;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样既可完成对用户所有请求，均要经过这个Filter进行验证用户登录。</p>
<h3 id="防止中文乱码过滤器"><a href="#防止中文乱码过滤器" class="headerlink" title="防止中文乱码过滤器"></a>防止中文乱码过滤器</h3><p>项目使用spring框架时。当前台JSP页面和JAVA代码中使用了不同的字符集进行编码的时候就会出现表单提交的数据或者上传/下载中文名称文件出现乱码的问题，那就可以使用这个过滤器。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!--用来指定一个具体的字符集--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!--true：无论request是否指定了字符集，都是用encoding；false：如果request已指定一个字符集，则不使用encoding--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring-Hibernate的OpenSessionInViewFilter控制session的开关"><a href="#Spring-Hibernate的OpenSessionInViewFilter控制session的开关" class="headerlink" title="Spring+Hibernate的OpenSessionInViewFilter控制session的开关"></a>Spring+Hibernate的OpenSessionInViewFilter控制session的开关</h3><p>当hibernate+spring配合使用的时候，如果设置了lazy=true（延迟加载）,那么在读取数据的时候，当读取了父数据后，hibernate 会自动关闭session，这样，当要使用与之关联数据、子数据的时候，系统会抛出lazyinit的错误，这时就需要使用spring提供的OpenSessionInViewFilter过滤器。</p>
<p>OpenSessionInViewFilter主要是保持Session状态直到request将全部页面发送到客户端，直到请求结束后才关闭session，这样就可以解决延迟加载带来的问题。</p>
<p>注意：OpenSessionInViewFilter配置要写在struts2的配置前面。因为tomcat容器在加载过滤器的时候是按照顺序加载的，如果配置文件先写的是struts2的过滤器配置，然后才是OpenSessionInViewFilter过滤器配置，所以加载的顺序导致，action在获得数据的时候session并没有被spring管理。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span><span class="comment">&lt;!-- lazy loading enabled in spring --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>sessionFactoryBeanName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- 可缺省。默认是从spring容器中找id为sessionFactory的bean，如果id不为sessionFactory，则需要配置如下，此处SessionFactory为spring容器中的bean。 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>sessionFactory<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>singleSession<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!-- singleSession默认为true,若设为false则等于没用OpenSessionInView --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Struts2的web-xml配置"><a href="#Struts2的web-xml配置" class="headerlink" title="Struts2的web.xml配置"></a>Struts2的web.xml配置</h3><p>项目中使用Struts2同样需要在web.xml配置过滤器，用来截取请求，转到Struts2的Action进行处理。</p>
<p>注意：如果在2.1.3以前的Struts2版本，过滤器使用org.apache.struts2.dispatcher.FilterDispatcher。否则使用org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter。从Struts2.1.3开始，将废弃ActionContextCleanUp过滤器，而在StrutsPrepareAndExecuteFilter过滤器中包含相应的功能。</p>
<p>三个初始化参数配置：</p>
<ul>
<li>config参数：指定要加载的配置文件。逗号分割。</li>
<li>actionPackages参数：指定Action类所在的包空间。逗号分割。</li>
<li>configProviders参数：自定义配置文件提供者，需要实现ConfigurationProvider接口类。逗号分割。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- struts 2.x filter --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/26/java-filter/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/26/java-filter/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要详细介绍了Filter的以下几个方面内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter概念介绍&lt;/li&gt;
&lt;li&gt;Filter的用途&lt;/li&gt;
&lt;li&gt;如何借助Filter实现拦截功能&lt;/li&gt;
&lt;li&gt;Filter的开发步骤和配置详解&lt;/li&gt;
&lt;li&gt;Filter链&lt;/li&gt;
&lt;li&gt;Filter的生命周期&lt;/li&gt;
&lt;li&gt;Filter的使用案例&lt;ul&gt;
&lt;li&gt;使用Filter验证用户登录安全控制&lt;/li&gt;
&lt;li&gt;防止中文乱码过滤器&lt;/li&gt;
&lt;li&gt;Spring+Hibernate的OpenSessionInViewFilter控制session的开关&lt;/li&gt;
&lt;li&gt;Struts2的web.xml配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Octopress博客的个性化配置</title>
    <link href="http://yoursite.com/2015/01/11/Octopress%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/01/11/Octopress博客的个性化配置/</id>
    <published>2015-01-11T13:52:49.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述了对Octopress搭建的博客进行一些个性化的配置，主要包括以下几个方面：</p>
<ul>
<li>优化提高博客的访问速度</li>
<li>设置链接在新窗口打开</li>
<li>配置首页文章以摘要形式展示</li>
<li>代码着色</li>
<li>添加侧边栏文章分类</li>
<li>添加多说评论系统</li>
<li>自动为图片添加URL前缀</li>
<li>添加访客统计</li>
</ul>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/" target="_blank" rel="external">http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/</a></p>
<h2 id="提高博客访问速度"><a href="#提高博客访问速度" class="headerlink" title="提高博客访问速度"></a>提高博客访问速度</h2><p>因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比，竟然超过了40s。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/setup-octopress-blog/call-octopress-blog-slowly.png" alt=""></p>
<p>仔细分析后我们发现其中都是一些被墙的请求报了404Error，所以导致访问博客巨慢无比，下面我们就一次阉割掉这些被墙的请求。T_T</p>
<h3 id="替换Google-JS公共库"><a href="#替换Google-JS公共库" class="headerlink" title="替换Google JS公共库"></a>替换Google JS公共库</h3><p>Octopress默认使用的是Google的JS公共库地址，加载的过程无比的缓慢。因此我们要把它改为<a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs" target="_blank" rel="external">百度的JS公共库</a>，需要把<code>/source/_includes/head.html</code>文件中的Google公共库地址改为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//libs.baidu.com/jquery/1.7.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="去掉Twitter"><a href="#去掉Twitter" class="headerlink" title="去掉Twitter"></a>去掉Twitter</h3><p>从上图可以看出加载失败的还有twitter，这个也得给去掉。</p>
<p>把在根目录下的<code>_config.yml</code>文件中Twitter内容给注释掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Twitter</div><div class="line">#twitter_user:</div><div class="line">#twitter_tweet_button: true</div></pre></td></tr></table></figure></p>
<p>把<code>\source\_includes\after_footer.html</code>文件中的twitter内容给注释掉：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% raw)<span class="comment">&lt;!--&#123;% include twitter_sharing.html)--&gt;</span>&#123;% endraw)</div></pre></td></tr></table></figure>
<h3 id="删除Google-font"><a href="#删除Google-font" class="headerlink" title="删除Google font"></a>删除Google font</h3><p>把在<code>\source\_includes\custom\head.html</code>中的Google font样式给删除：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="设置链接在新窗口打开"><a href="#设置链接在新窗口打开" class="headerlink" title="设置链接在新窗口打开"></a>设置链接在新窗口打开</h2><p>在博文中，如果点击链接直接在本窗口打开了，那么用户体验就不是很好。而markdown的标准语法是不支持链接在新窗口打开的，虽然可以通过在markdown中直接写html标签来解决这个问题，但是这与markdown的简洁书写特性不符。但是我们可以通过设置Octopress来达到这种效果，即在<code>\source\_includes\custom\head.html</code>文件中添加如下一段代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	function addBlankTargetForLinks () &#123;</div><div class="line">	  $('a[href^="http"]').each(function()&#123;</div><div class="line">		  $(this).attr('target', '_blank');</div><div class="line">	  &#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	$(document).bind('DOMNodeInserted', function(event) &#123;</div><div class="line">	  addBlankTargetForLinks();</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="首页文章以摘要形式展示"><a href="#首页文章以摘要形式展示" class="headerlink" title="首页文章以摘要形式展示"></a>首页文章以摘要形式展示</h2><ol>
<li>在文章对应的markdown文件中，在需要显示在首页的文字后面添加<code>&lt;!--more--&gt;</code>，执行rake generate后在首页上会看到只显示<code>&lt;!—more—&gt;</code>前面的文字，文字后面会显示<code>Read on</code>链接，点击后进入文字的详细页面;</li>
<li>如果想将Read on修改为中文，可以修改_config.yml文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles</div><div class="line">excerpt_link: "阅读全文&amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles</div></pre></td></tr></table></figure>
<h2 id="代码着色"><a href="#代码着色" class="headerlink" title="代码着色"></a>代码着色</h2><p>Octopress使用的是Pygments来进行代码着色的，使用方式也比较简单如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//java code</span></div></pre></td></tr></table></figure>
<p><a href="http://pygments.org/languages/" target="_blank" rel="external">Pygments支持的语言列表</a></p>
<h3 id="修改代码生成css"><a href="#修改代码生成css" class="headerlink" title="修改代码生成css"></a>修改代码生成css</h3><p>当然你也可以修改Pygments生成的代码css样式。</p>
<p>Pygments默认提供了很多css样式，你可以在python shell中用下面命令列出当前pygments所支持的样式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from pygments.styles import STYLE_MAP</div><div class="line">STYLE_MAP.keys()</div><div class="line">[<span class="string">'manni'</span>, <span class="string">'igor'</span>, <span class="string">'xcode'</span>, <span class="string">'vim'</span>, <span class="string">'autumn'</span>, <span class="string">'vs'</span>, <span class="string">'rrt'</span>, <span class="string">'native'</span>, <span class="string">'perldoc'</span>, <span class="string">'borland'</span>, <span class="string">'tango'</span>, <span class="string">'emacs'</span>, <span class="string">'friendly'</span>, <span class="string">'monokai'</span>, <span class="string">'paraiso-dark'</span>, <span class="string">'colorful'</span>, <span class="string">'murphy'</span>, <span class="string">'bw'</span>, <span class="string">'pastie'</span>, <span class="string">'paraiso-light'</span>, <span class="string">'trac'</span>, <span class="string">'default'</span>, <span class="string">'fruity'</span>]</div></pre></td></tr></table></figure>
<p>通过-S来选择，需要生成default的样式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pygmentize -S default <span class="_">-f</span> html &gt; your/path/pygments.css</div></pre></td></tr></table></figure>
<p>有时候Octopress会把我们想要展示的Ruby代码解析成HTML，如果只是想展示代码，而不让Octopress来解析，那么可以在代码前后加入<code>raw</code>和<code>endraw</code>代码。</p>
<h2 id="添加侧边栏文章分类（category）"><a href="#添加侧边栏文章分类（category）" class="headerlink" title="添加侧边栏文章分类（category）"></a>添加侧边栏文章分类（category）</h2><p>1.在<code>plugins</code>目录下创建<code>category_list_tag.rb</code>文件，内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">module Jekyll </div><div class="line">  class CategoryListTag &lt; Liquid::Tag </div><div class="line">    def render(context) </div><div class="line">      html = "" </div><div class="line">      categories = context.registers[:site].categories.keys </div><div class="line">      categories.sort.each do |category| </div><div class="line">        posts_in_category = context.registers[:site].categories[category].size </div><div class="line">        category_dir = context.registers[:site].config['category_dir'] </div><div class="line">        category_url = File.join(category_dir, category.gsub(/_|\P&#123;Word&#125;/, '-').gsub(/-&#123;2,&#125;/, '-').downcase) </div><div class="line">        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='/#&#123;category_url&#125;/'&gt;#&#123;category&#125; (#&#123;posts_in_category&#125;)&lt;/a&gt;&lt;/li&gt;\n" </div><div class="line">      end </div><div class="line">      html </div><div class="line">    end </div><div class="line">  end </div><div class="line">end</div><div class="line"></div><div class="line">Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</div></pre></td></tr></table></figure>
<p>2.添加<code>source/_includes/asides/category_list.html</code>文件，内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"categories"</span>&gt;</span></div><div class="line">    &#123;% category_list)</div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.修改<code>_config.yml</code>文件，在<code>default_asides</code>项中添加<code>asides/category_list.html</code>，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</div></pre></td></tr></table></figure></p>
<p>在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。</p>
<h2 id="添加多说评论"><a href="#添加多说评论" class="headerlink" title="添加多说评论"></a>添加多说评论</h2><p>Octopress默认自带了DISQUS，但是对于国内不是很好用。所以在经过考虑之后选择了国内比较流行的多说评论系统。<br>首先要去<a href="http://duoshuo.com/" target="_blank" rel="external">多说网站注册</a>，获取站点的<code>short_name</code>。</p>
<p>在<code>_config.yml</code>中添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># duoshuo comments</div><div class="line">duoshuo_comments: true</div><div class="line">duoshuo_short_name: yourname</div></pre></td></tr></table></figure></p>
<p>在<code>./source/_layouts/post.html</code>中的<code>disqus</code>代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% if site.disqus_short_name and page.comments == true)</div><div class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span>&#123;% include post/disqus_thread.html)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">&#123;% endif)</div></pre></td></tr></table></figure>
<p>下方添加多说评论模块：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true)</div><div class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comments"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span>&#123;% include post/duoshuo.html)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">&#123;% endif)</div></pre></td></tr></table></figure></p>
<p>如果你希望一些单独的页面下方也放置评论功能，那么在<code>./source/_layouts/page.html</code>中也做如上修改。<br>然后创建一个<code>./source/_includes/post/duoshuo.html</code>文件，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Duoshuo Comment BEGIN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-title</span>=<span class="string">"&#123;% if site.titlecase)&#123;&#123; page.title | titlecase &#125;&#125;&#123;% else)&#123;&#123; page.title &#125;&#125;&#123;% endif)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">  var duoshuoQuery = &#123;short_name:"&#123;&#123; site.duoshuo_short_name &#125;&#125;"&#125;;</div><div class="line">  (function() &#123;</div><div class="line">    var ds = document.createElement('script');</div><div class="line">    ds.type = 'text/javascript';ds.async = true;</div><div class="line">    ds.src = 'http://static.duoshuo.com/embed.js';</div><div class="line">    ds.charset = 'UTF-8';</div><div class="line">    (document.getElementsByTagName('head')[0] </div><div class="line">    || document.getElementsByTagName('body')[0]).appendChild(ds);</div><div class="line">  &#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Duoshuo Comment END --&gt;</span></div></pre></td></tr></table></figure>
<p>最后再修改<code>_includes/article.html</code>文件，在<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true)</div><div class="line">         | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% if index)&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif)#disqus_thread"</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">&#123;% endif)</div></pre></td></tr></table></figure></p>
<p>下方添加下面代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true)</div><div class="line">         | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% if index)&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif)#comments"</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">&#123;% endif)</div></pre></td></tr></table></figure></p>
<h2 id="自动为图片添加url前缀"><a href="#自动为图片添加url前缀" class="headerlink" title="自动为图片添加url前缀"></a>自动为图片添加url前缀</h2><p>我把图片资源都<a href="https://portal.qiniu.com/" target="_blank" rel="external">放在了七牛云存储</a>上，写博客时候就是用七牛的外链。但是这样有几个问题：</p>
<ul>
<li>每次写博客插入图片外链地址时候都很麻烦，需要给每张图片都添加七牛外链地址url前缀；</li>
<li>如果以后更换了存储，那就麻烦了，需要依次编辑替换每个图片的url前缀</li>
</ul>
<p>现在我们就使用一种灵活的方式来配置并自动生成图片的URL前缀：</p>
<p>首先修改<code>/plugins/image_tag.rb</code>文件，在<code>@img[&#39;class&#39;].gsub!(/&quot;/, &#39;&#39;) if @img[&#39;class&#39;]</code>后添加下面一行代码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@img[<span class="string">'src'</span>] = Jekyll.configuration(&#123;&#125;)[<span class="string">'static_file_prefix'</span>] + @img[<span class="string">'src'</span>] <span class="keyword">if</span> @img[<span class="string">'src'</span>][<span class="number">0</span>] == <span class="string">'/'</span></div></pre></td></tr></table></figure>
<p>然后再修改根目录下的<code>_config.yml</code>文件，添加如下配置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Add url prefix for image automatically</div><div class="line">static_file_prefix: http://7u2i08.com1.z0.glb.clouddn.com</div></pre></td></tr></table></figure>
<p>最后我们在插入图片的时候要记住不能再使用Markdown语法来写了，要<a href="http://octopress.org/docs/plugins/image-tag/" target="_blank" rel="external">使用Ocotpress自定义的IMG标签来插入图片</a>。</p>
<p>本地预览先generate后preview，这样一来插入图片就灵活方便多了。</p>
<h2 id="添加访客统计"><a href="#添加访客统计" class="headerlink" title="添加访客统计"></a>添加访客统计</h2><p>本博客的访客统计系统使用的是Flag Counter，所以要<a href="http://www.flagcounter.com/" target="_blank" rel="external">先去Flag Counter获取代码</a>。</p>
<p>拿到代码后添加<code>.\source\_includes\custom\asides\flag_counter.html</code>文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>访客统计<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://s07.flagcounter.com/more/2SH"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_12/viewers_0/labels_0/pageviews_1/flags_0/"</span> <span class="attr">alt</span>=<span class="string">"Flag Counter"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将页面添加到侧边栏，在<code>./_config.yml</code>配置文件中添加下面一行配置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_asides: [……, custom/asides/flag_counter.html]</div></pre></td></tr></table></figure>
<p>最后添加控制开关，在<code>./_config.yml</code>配置文件中添加下面一行配置：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Flag Counter</div><div class="line">flag_counter: true</div></pre></td></tr></table></figure></p>
<h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p><a href="http://zhanzhang.baidu.com/site/index" target="_blank" rel="external">百度站长工具</a></p>
<p><a href="http://tongji.baidu.com/web/9700918/overview/sole?siteId=6181997" target="_blank" rel="external">百度统计</a></p>
<p><a href="https://www.google.com/analytics/web/?authuser=0#home/a58552615w92512090p96324524/" target="_blank" rel="external">Google Analytics</a></p>
<p><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN&amp;siteUrl=http://tianweili.github.io/&amp;authuser=0" target="_blank" rel="external">Google站长工具</a></p>
<hr>
<p>作者：<a href="http://tianweili.github.com/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/" target="_blank" rel="external">http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述了对Octopress搭建的博客进行一些个性化的配置，主要包括以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化提高博客的访问速度&lt;/li&gt;
&lt;li&gt;设置链接在新窗口打开&lt;/li&gt;
&lt;li&gt;配置首页文章以摘要形式展示&lt;/li&gt;
&lt;li&gt;代码着色&lt;/li&gt;
&lt;li&gt;添加侧边栏文章分类&lt;/li&gt;
&lt;li&gt;添加多说评论系统&lt;/li&gt;
&lt;li&gt;自动为图片添加URL前缀&lt;/li&gt;
&lt;li&gt;添加访客统计&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他技术" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>windows下搭建Octopress博客</title>
    <link href="http://yoursite.com/2015/01/11/windows%E4%B8%8B%E6%90%AD%E5%BB%BAOctopress%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2015/01/11/windows下搭建Octopress博客/</id>
    <published>2015-01-11T13:43:31.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/</a></p>
<h2 id="将博客发布到GitHub"><a href="#将博客发布到GitHub" class="headerlink" title="将博客发布到GitHub"></a>将博客发布到GitHub</h2><p>进入博客源代码所在目录。编辑markdown后</p>
<ol>
<li>执行<code>rake new_post[&#39;my first blog&#39;]</code>来生成一篇博文；</li>
<li>执行<code>rake generate</code>生成博客网页；</li>
<li>执行<code>rake preview</code>后在本地输入<localhost:4000>来预览博客；</localhost:4000></li>
<li>执行<code>rake setup_github_pages</code>命令后，按照提示输入对应的GitHub的repository地址：<code>git@github.com:TianweiLi/tianweili.github.com.git</code>；（不执行这一步会可能会报<code>No such file or directory - _deploy</code>错误）</li>
<li>执行<code>rake deploy</code>将博客站点发布到GitHub<code>master</code>分支上，这样就可以访问博客了（这一步就是把public目录下文件push到master分支上）；</li>
<li>将修改后的octopress源码push到GitHub的<code>source</code>分支上：</li>
</ol>
<p>依次执行下面命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">'build octopress blog'</span></div><div class="line">git push origin <span class="built_in">source</span></div></pre></td></tr></table></figure></p>
<h2 id="换一台电脑写博客"><a href="#换一台电脑写博客" class="headerlink" title="换一台电脑写博客"></a>换一台电脑写博客</h2><p>如果需要在另一台电脑写博客并提交上去，那么可以采用下面步骤来实现。</p>
<p>先要找到GitHub的repository url，然后clone source分支到本地：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> -b <span class="built_in">source</span> git@github.com:TianweiLi/tianweili.github.com.git octopress</div></pre></td></tr></table></figure>
<p>然后clone master分支到本地：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> octopress</div><div class="line">git <span class="built_in">clone</span> git@github.com:TianweiLi/tianweili.github.com.git _deploy</div></pre></td></tr></table></figure></p>
<p>然后进行一些相关依赖的安装，依次执行下面命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gem install bundler</div><div class="line">bundle install</div><div class="line">rake install</div><div class="line">rake setup_github_pages</div></pre></td></tr></table></figure>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      在Windows下搭建Octopress博客。
    
    </summary>
    
      <category term="其他技术" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="http://yoursite.com/2015/01/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2015/01/09/第一篇博文/</id>
    <published>2015-01-09T09:28:08.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年，又一个新的博客！</p>
<p>IT干了几年，博客社区也换了几次。至今没有遇到特别中意的社区，<a href="http://www.cnblogs.com/hellojava/" target="_blank" rel="external">最近一次用得比较久的博客就是博客园了</a>，在博客园写博客给我的感觉相对是比较好的，但是仍然不能让我满意。于是我动起了自己搭建博客的念头，多方搜索比较下选择使用<a href="http://octopress.org/" target="_blank" rel="external">Octopress</a>+<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>来搭建自己的个人博客。</p>
<a id="more"></a>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/10/my-first-blog/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/10/my-first-blog/</a></p>
<h2 id="为什么不再使用博客园写博客"><a href="#为什么不再使用博客园写博客" class="headerlink" title="为什么不再使用博客园写博客"></a>为什么不再使用博客园写博客</h2><h3 id="博客园氛围以-NET技术社区为主"><a href="#博客园氛围以-NET技术社区为主" class="headerlink" title="博客园氛围以.NET技术社区为主"></a>博客园氛围以.NET技术社区为主</h3><p>当然其他语言技术的博客也有，但几乎.NET要占去了一半甚至更多。这对于我一个做Java，做Python，做Perl……却唯独没做.NET的人来说略微有些显得“格格不入”——上面其他语言技术的博客太少了，尤其是高质量的更少！</p>
<p>这样带来的后果就是与你“志同道合”能够互相讨论学习的人比较少，当然如果你主要是做.NET的那还是值得你考虑加入的。</p>
<h3 id="能进行个性化定制的项目有点少"><a href="#能进行个性化定制的项目有点少" class="headerlink" title="能进行个性化定制的项目有点少"></a>能进行个性化定制的项目有点少</h3><p>不过坦白来说，博客园至少是主流几个技术社区能够进行个性化定制最多的技术博客社区了，否则我也不会最后用这一个以.NET为主的技术社区。</p>
<p>但是我仍然觉得还不够，而且有诸多限制，很多想要的功能加不上，很多不想要的功能硬是塞给你，又去除不掉。</p>
<h3 id="在上面写博客有诸多不爽"><a href="#在上面写博客有诸多不爽" class="headerlink" title="在上面写博客有诸多不爽"></a>在上面写博客有诸多不爽</h3><p>首先是写博客比较麻烦，各种调样式，而我又是对排版格式等有点追求的人，（但是我不是处女座，:)。）所以最后导致我写一篇博客花在调样式上面的时间比较多，而且很不方便。</p>
<p>其次是代码样式格式着色都不是很喜欢，虽然我自己用CSS改了一下，但仍然觉得很丑。</p>
<h3 id="上面高质量的博客很少"><a href="#上面高质量的博客很少" class="headerlink" title="上面高质量的博客很少"></a>上面高质量的博客很少</h3><p>感觉现在首页上质量较高的博客变得越来越少了，非.NET的更少，待下去也没什么意义。所以，我走了……</p>
<h3 id="博客风格样式不好看"><a href="#博客风格样式不好看" class="headerlink" title="博客风格样式不好看"></a>博客风格样式不好看</h3><p>风格样式不好看，自己能修改的地方又不多。我本人是喜欢比较简洁一点的风格，写个博客嘛，不至于那么多花花绿绿的，所以我一进入一些特别花哨的博客就看得眼花缭乱，哈哈。</p>
<p>So，只有自己建个博客来折腾咯。</p>
<p>最后，不过我仍然很感谢<a href="http://www.cnblogs.com/hellojava/" target="_blank" rel="external">在博客园的那一段时光</a>，在博客园写博客的那一段日子也让自己进不了不少。（虽然还有很多的博文都存放在草稿里没有发布出来，那就让它继续躺在草稿箱里吧，-_-）至少博客园的博客部分是我所见过几个主流社区里最好的，只是感觉还不太适合自己而已。</p>
<h2 id="为什么选择Octopress来写博客"><a href="#为什么选择Octopress来写博客" class="headerlink" title="为什么选择Octopress来写博客"></a>为什么选择Octopress来写博客</h2><p>基本上博客园的诸多不爽在这里都得到了解决，-_-!</p>
<h3 id="可以由自己随意定制"><a href="#可以由自己随意定制" class="headerlink" title="可以由自己随意定制"></a>可以由自己随意定制</h3><p>当然也少不了折腾，查资料，配置，各种排查错误等等等的，也耗费了不少的时间和精力，并且由于国外被墙的缘故，还要删掉很多请求来进行优化访问速度。但是仍然感觉很爽，学习新知识，排查解决BUG后的成就感也挺大的。</p>
<h3 id="博客风格样式都比较喜欢"><a href="#博客风格样式都比较喜欢" class="headerlink" title="博客风格样式都比较喜欢"></a>博客风格样式都比较喜欢</h3><p>我一直比较喜欢简洁素朴一些的博客风格。既然是博客，就让人注意到文章的内容，而不是被吸引到博客的皮肤和各种特效上。而且自己搭建的博客风格可以随意修改定制。</p>
<p>而且Octopress<a href="http://pygments.org/" target="_blank" rel="external">使用Pygments来进行代码着色</a>，代码风格样式也是自己比较喜欢的，比如：</p>
<figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ltw;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello world!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且Octopress搭建的博客无论是在PC端还是移动端，它的页面兼容性都比较好哦。</p>
<h3 id="写博客比较爽"><a href="#写博客比较爽" class="headerlink" title="写博客比较爽"></a>写博客比较爽</h3><p>Octopress用的是Markdown来写博客，这正合自己的心意。用<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown语法</a>写起来比较快，使用文本格式编写和存储，简洁轻便，还可以很方便得进行本地预览。</p>
<p>并且文章的发布也很方便，<code>generate</code>后一条命令就<code>deploy</code>到GitHub上去了。</p>
<h3 id="搭建过程比较折腾人"><a href="#搭建过程比较折腾人" class="headerlink" title="搭建过程比较折腾人"></a>搭建过程比较折腾人</h3><p>因为Octopress使用Ruby来写的，并且用到了Python的Pygments插件，还用到了Git来进行版本管理，使用GitHub Pages服务，博客和源代码提交到了GitHub来存储，图片又使用的七牛云存储，评论使用的多说评论系统，博客各方面的修改和个性化改动，还有被墙的缘故要进行访问优化等等。</p>
<p>总之博客搭建过程中会遇到各种问题，滋味那叫一个酸爽。当然也有人一次成功，那即使运气了。不过遇到问题，解决问题也学到了不少东西。后面我会把一部分博客配置和遇到各种问题的解决方式写成博客记录和分享。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>新的一年，开通了新的博客！迎来了一个好的开端。接下来我就使用这个博客来记录和分享自己的学习和生活经历吧！</p>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/10/my-first-blog/" target="_blank" rel="external">http://tianweili.github.io/blog/2015/01/10/my-first-blog/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年，又一个新的博客！&lt;/p&gt;
&lt;p&gt;IT干了几年，博客社区也换了几次。至今没有遇到特别中意的社区，&lt;a href=&quot;http://www.cnblogs.com/hellojava/&quot;&gt;最近一次用得比较久的博客就是博客园了&lt;/a&gt;，在博客园写博客给我的感觉相对是比较好的，但是仍然不能让我满意。于是我动起了自己搭建博客的念头，多方搜索比较下选择使用&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;+&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;来搭建自己的个人博客。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="octopress" scheme="http://yoursite.com/tags/octopress/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>骑车去西藏—第7天—高尔寺山，待续</title>
    <link href="http://yoursite.com/2013/07/18/%E9%AA%91%E8%BD%A6%E5%8E%BB%E8%A5%BF%E8%97%8F%E2%80%94%E7%AC%AC7%E5%A4%A9%E2%80%94%E9%AB%98%E5%B0%94%E5%AF%BA%E5%B1%B1%EF%BC%8C%E5%BE%85%E7%BB%AD/"/>
    <id>http://yoursite.com/2013/07/18/骑车去西藏—第7天—高尔寺山，待续/</id>
    <published>2013-07-18T14:18:46.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>未完待续。。。</p>
<h2 id="骑行日志"><a href="#骑行日志" class="headerlink" title="骑行日志"></a>骑行日志</h2><ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/" target="_blank" rel="external">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/" target="_blank" rel="external">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/" target="_blank" rel="external">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/18/cycling-to-tibet-7/" target="_blank" rel="external">骑车去西藏—第7天—高尔寺山，待续</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      骑车去西藏—第7天—高尔寺山，待续
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>骑车去西藏—第6天—折多山，折磨人多的山</title>
    <link href="http://yoursite.com/2013/07/17/%E9%AA%91%E8%BD%A6%E5%8E%BB%E8%A5%BF%E8%97%8F%E2%80%94%E7%AC%AC6%E5%A4%A9%E2%80%94%E6%8A%98%E5%A4%9A%E5%B1%B1%EF%BC%8C%E6%8A%98%E7%A3%A8%E4%BA%BA%E5%A4%9A%E7%9A%84%E5%B1%B1/"/>
    <id>http://yoursite.com/2013/07/17/骑车去西藏—第6天—折多山，折磨人多的山/</id>
    <published>2013-07-17T10:07:54.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/</a></p>
<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>行程：康定（海拔2395）—折多塘（海拔3222）—折多山（海拔4298）—新都桥前20公里（海拔3630）</p>
<p>里程：58KM</p>
<h2 id="山在我脚下，我也在山中。"><a href="#山在我脚下，我也在山中。" class="headerlink" title="山在我脚下，我也在山中。"></a>山在我脚下，我也在山中。</h2><p>我感觉今天是我骑行以来最精彩最难忘的一天，一天之内尝遍了酸甜苦辣。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-169.jpg" alt=""></p>
<h2 id="离开康定"><a href="#离开康定" class="headerlink" title="离开康定"></a>离开康定</h2><p>依旧是天蒙蒙亮，在宋和formes还在睡梦中，七点钟我就独自一人先出发了，挑战折多山！</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-170.jpg" alt=""></p>
<p>先温习下攻略：</p>
<blockquote>
<p>今天因为途中无法找到合适的饭店解决午餐，所以请提前准备干粮。从今天开始几乎每天都要翻山了！另外，今天的里程碑也有点乱，不必太在意。虽然路程不远，只有区区的78km，但因为我们会爬藏区的第一座山－－折多山（海拔4298米），海拔上升大，很累，就可能让你感觉这是你骑行以来最难的一天。但是冲上垭口后，你会发现山那边是非常壮观的风景。</p>
</blockquote>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-171.jpg" alt=""></p>
<p>在康定城里，我在路边整理装备的时候碰到个藏族老奶奶，聊了一会，她知道我是去西藏的，不停的跟我说要注意安全，看到车靠边骑云云……唠叨的感觉让人很温暖。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-172.jpg" alt=""></p>
<p>大清早又遇到军队的车队，为了不想吃汽车尾气，停下来等它们都过完，经过我的时候，有的战士会对着你喊加油。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-173.jpg" alt=""></p>
<p>还没出城，就明显感觉到坡度已经很陡了。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-174.jpg" alt=""></p>
<p>依旧是蓝天白云，看得久了都会让人产生审美疲劳啊。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-175.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-176.jpg" alt=""></p>
<p>毒辣的太阳又出来了，温度马上飙到40°。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-177.jpg" alt=""></p>
<p>formes接山上的山泉喝，而我都是问路边的人家借的白开水，一个水壶两个脉动瓶子，够撑个两小时。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-178.jpg" alt=""></p>
<p>上午九十点钟的样子，艰难的骑到了折多塘，在这里等宋和formes一起去爬折多山。本来我们今天计划是从康定到折多塘的，然后美美的泡上半天温泉，明天再翻折多山。后来看这么早就到了索性直接翻过折多山吧。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-179.jpg" alt=""></p>
<p>远处的山已经完全被白云盖住了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-180.jpg" alt=""></p>
<h2 id="挑战折多山"><a href="#挑战折多山" class="headerlink" title="挑战折多山"></a>挑战折多山</h2><p>抬头，看着前面蜿蜒盘旋的上坡，崩溃！低头，看着走过的道路，自豪。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-181.jpg" alt=""></p>
<p>来自己加把劲</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-182.jpg" alt=""></p>
<p>今天全程推一大程，骑一小程，哈哈。都说折多山就是折磨人多的山，但是我怎么没感觉到呢，估计是自己已经是吃苦无底线了，苦中找乐，心态最重要。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-183.jpg" alt=""></p>
<p>悬崖之上，眺望远山。宋说我和formes为了一个镜头，连命都不要了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-184.jpg" alt=""></p>
<p>formes拿着摄影机到处摄像</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-185.jpg" alt=""></p>
<p>在路上，碰到个骑友，给了宋一些盐，给了我一些缓解高原反应的药（不过后来都给宋了）。我说给他照一张，他说那他岂不是成蒙面侠了，哈哈。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-186.jpg" alt=""></p>
<p>漫山遍野的牦牛，星星点点在高原上，仿佛一幅很美的图画。牦牛比普通的牛要小，浑身都是长毛保暖，头上长长的尖角。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-187.jpg" alt=""></p>
<p>来个特写，牦牛很怕人，稍一靠近它就跑远了，我还没吃过牦牛肉呢。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-188.jpg" alt=""></p>
<p>高原上除了牦牛，还有马群</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-189.jpg" alt=""></p>
<p>草多马也肥啊</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-190.jpg" alt=""></p>
<p>骑着骑着，他们俩就落在后面了。宋这时候有了高原反应，据他说感觉是头晕浑身无力，胸闷，推两步车就累直喘气。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-191.jpg" alt=""></p>
<p>36公里的上坡，什么时候是个头！今天至少有三分之二的骑友选择了搭车，路上很少看到骑友了，远远没有从泸定到康定那条路上看的的人多。一路上不时有车顶载满自行车的面包车从身旁呼啸而过，不少人从车窗里伸出大拇指喊着兄弟加油！</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-192.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-193.jpg" alt=""></p>
<p>又累又饿又渴，不管了，把车子一停下，一屁股坐路边就掏出大饼来。昨天康定买的锅魁已经又冷又硬了，但还是吃的香喷喷的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-194.jpg" alt=""></p>
<p>路边随处可见别人乱扔的红牛罐子。嘿嘿，送给你。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-195.jpg" alt=""></p>
<p>随处可见的佛塔自己也能造</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-196.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-197.jpg" alt=""></p>
<p>回过头去，看着山下盘盘的路，不见了宋和formes的影子，看来他们在后面还远没有跟上来。此时已经三四点了，看来我们在路上走走停停耽误了太多的时间，此时我开始有点着急了。我给他们打电话，让他们步伐加快些，因为即使到了山顶，后面还有几十公里下坡呢，天黑了太危险！</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-198.jpg" alt=""></p>
<p>有辆轿车后轮爆胎了，还晃晃荡荡的往下开。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-199.jpg" alt=""></p>
<p>就在自己爬坡爬的叫天天不应叫地地不灵的时候，抬头一看，山顶的彩旗在飘荡着，仿佛在像我招手，要到山顶了！我快要喊出来，尽管没剩多少体力了，但还是手舞足蹈兴奋的推着车向山顶跑去。每次快到山顶都能给我惊喜！</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-200.jpg" alt=""></p>
<p>登上折多山山顶，胜利了！海拔4298米！我马上给爸爸打电话，因为下着雨，手机放在塑料袋里的，跟爸爸分享着胜利的喜悦！给肖青打电话，果然不出我所料，没人接。</p>
<p>此时虽然站在海拔四千多米的折多山上，但是传说中的高原反应却一点儿都没有，不过海拔高的地方空气确实很稀薄，很多人走不了几步就喘的。平时骑车上个几百米的坡没事，但是你在海拔几千米的山上试试，根本完全不是一回事。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-201.jpg" alt=""></p>
<p>此时五点钟了，山顶又下雨又是雾的，能见度不超过4米，看了下温度计，此时竟然只有5°，而我还穿着单衣单裤！冻的我瑟瑟发抖，山顶有户藏族的棚子，他们在那卖一些藏民特产和吃的，我赶忙进去躲起来。一小碗酸辣粉就要10块钱，没舍得吃。还是啃我的冷大饼，水壶里的水又冰又凉。从驮包里把护膝和雨衣穿上，此时手已经完全冻僵不听使唤了。</p>
<p>等了半小时，宋和formes也陆续赶上了山顶。formes也冻的不停的来回跑着步，来不及多享受一会胜利的喜悦，山顶我是一刻都不想多呆了！他们也都赶快换了下山的装备，赶紧离开这个鬼地方，再多呆一会恐怕我就要冻死山顶了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-202.jpg" alt=""></p>
<h2 id="下山比上山还苦逼"><a href="#下山比上山还苦逼" class="headerlink" title="下山比上山还苦逼"></a>下山比上山还苦逼</h2><p>就这样，在大风大雨大雾中，我们颤颤巍巍的下山了。formes在车尾上系了个闪光灯，不停地问我能不能看得到，我说能，我就跟在你后面两米的地方能看不到吗，不过五米外能不能看到我就不知道了，嘿嘿。</p>
<p>下山我们根本不敢下的太快，因为雾太大了，前方四五米都一片白，冻僵的双手还是紧紧捏着刹车，如果此时对面来辆汽车，恐怕就得来个亲密接触了。</p>
<p>更糟糕的是还下着大雨刮着大风，高原的大风果然不是盖的，如果风是从正面刮来的，那么即便是陡下坡，车子基本都走不了的需要蹬踏。我最怕风从侧面刮，整个人带车子都给往路另一边推，根本无法靠着路边走，非常危险。</p>
<p>大概下了十几分钟六七公里的样子，骑在前面的formes突然停了下来，原来他突然想起来在山顶他换衣服的时候，腰包落在山顶忘记拿了！包里面有摄影机身份证银行卡和现金，几乎最重要的东西都在里面。此时再骑车上去找已经不现实了，于是他就准备在路边找搭车上去，宋在那看车，我继续下山先去新都桥找住宿的地方。</p>
<p>下山的时候，我冻的已经不行了，也顾不上危险了，就想赶快下山离开这里，我几乎是一路嚎叫着下了山。下了山我以为应该会好了吧，一看温度计仍然还是六七度，原来即便下了山此时海拔仍然有接近四千，还是一样冷。</p>
<p>雨越下越大，穿着的单裤完全湿透了，没有穿雨裤真是失策啊，两只脚也全都浸泡在水里。这时候大风全部是迎面刮来的，戴着面巾全部被雨湿透了，让人喘不过气来，把面巾扯下来，迎面的雨点又打在脸上生疼。在大风大雨下，我已经冻的浑身发抖，牙齿打颤，还是勉强的蹬踏着，我这辈子都没这么冷过。想着自己真是花钱来买罪受啊，恨不得把车子一甩，坐在地上大哭一场。</p>
<h2 id="借宿藏民家"><a href="#借宿藏民家" class="headerlink" title="借宿藏民家"></a>借宿藏民家</h2><p>路上很冷清一个人也没有，忍耐着骑着骑着两边渐渐的开始偶尔看到零零散散的几间房子了，应该就是藏民住的房子吧。这时候前面遇到了三个骑友，劝我一起找个地方借宿一晚。我一看码表，此时七点钟，距离新都桥还有二十多公里，要是在平时赶到新都桥肯定没问题，但是这种恶劣环境下肯定是到不了了。于是我们四个找了户藏民家借宿了，有个很好心的藏民老爷爷收留了我们。照片是我后来走的时候补照的，最远处拐角的那家就是我借宿的藏民家。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-203.jpg" alt=""></p>
<p>在藏族老爷爷带领下，进了院子里面，门口栓的藏獒非常凶，即使被链子拴着但还是让人不放心。进了屋里条件很简陋，两层的房子，下面一层养着十几头大大小小的牦牛，沿着木质的楼梯上了楼。老爷爷给我们生了火，我们赶快把这一身湿透了的行头都给脱了，我想去托包里掏出几间干衣服，却发现即使有了雨罩，却还是罩不住这么大的雨，里面的衣服也都湿了，但是不管那么多了，总比身上全都湿透了的衣服强吧。</p>
<p>家里就只有三个人，老爷爷、一个女主人（应该不是老爷爷的女儿就是儿媳）、一个小姑娘（女主人的孩子）。老爷爷问我们吃饭了没，然后就给我们煮饭去了，反正那又冷又干的大饼我是不想啃了。</p>
<p>喝了点开水，吃了些感冒药预防感冒，再烤着火，渐渐的整个人慢慢恢复过来。我们四个人围坐在火炉边攀谈起来，才知道他们是一个队的，从湖北武汉过来的同学，今年刚毕业。其中一个人高原反应特别厉害，头痛头晕胸闷的，还呕吐，腿肿的厉害。听说他今天爬折多山的时候走几步就累得不行了，真不知道他是怎么坚持到这里来的，真的是这样，即便是再好的体力，摊上了高反，那一切都是白瞎。另两个人问他明天能继续走不，他说实在是不行了，想休息一天。另两个人对他明显不满的样子，埋怨他拖累了大家耽误了行程。</p>
<p>我给宋和formes打电话，他们也已经下山了，formes的腰包终究还是没能找回来，是落在山顶被没有素质贪图小便宜的人给捡走了，他整个人特别懊恼悔恨的样子。听宋说他们也准备在附近找个旅馆住了，刚才他们找的一个藏民家，但是嫌环境条件不好，就没住。我说现在这种情形下就别太挑剔了，他们就继续赶路找旅馆。</p>
<p>回到火炉边，大家一起烤着火吃着热饭，感觉满足得不能再满足了，老爷爷煮了一大锅肉让随便加，又冷又饿，我也不客气了，直接吃到想呕。我们让老爷爷一家人也一起吃，老爷爷让我们先吃，原来他是怕饭不够我们不够吃，真是太好了，在我们再三劝下他们一家也开始吃了。</p>
<p>大家一起边吃饭边聊天，老爷爷的汉语讲不好，需要仔细讲加手势的，女主人更是完全不懂汉语，不过小女儿因为正在上学（估计小学）倒是会讲。于是我们就叫她当翻译，不过她好像因为我们到来打扰有点不满，嘟着嘴一脸蛮不情愿的充当我们之间交流的桥梁。藏语除了扎西德勒我就完全不懂了，感觉藏语说出来特别粗犷的感觉，有点像吵架，跟重庆话差不多。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-204.jpg" alt=""></p>
<p>在他家借宿我们都感觉过意不去，多少要给些费用的，老爷爷非常好说话，我们就一人给他20块住宿费和5块钱吃饭费用。后来我跟宋和formes说起的时候还受到了他们的鄙视，说吃那么好怎么好意思就给这么点。老爷爷不停的劝我们多吃些，最后我们都是吃的撑的不能再撑了。反正藏族人民给我的感觉就是特别淳朴，连我这种这么单纯的人相比之下都显得那么老奸巨猾了哈哈。</p>
<p>夜里睡觉的时候，女主人给我们收拾出来很多干净的被子，他们三个骑友在大厅的三张床上睡，大厅里睡不下，老爷爷就让我进他们主卧睡，让我睡在床上，直接把他们赶到打地铺。我感觉过意不去，但是他坚持让我睡床上，我就只好把睡袋铺好，上面也盖了层被子准备睡了，睡个暖和的好觉真好。</p>
<p>就在我刚躺下准备睡觉的时候，女主人刚去楼下挤完了牦牛奶回来，突然扑通一声跪下了，好大的声响，吓我一跳。嘴里念念有词，然后整个身体伏在地上磕头，原来是对着桌上供着的活佛拜祭呢，来回做了三次，然后就搂着小女儿躺下了。我也躺在睡袋里，听着他们一家三口的说着话，虽然藏语我听不懂，但是却有很温暖的感觉。</p>
<p>夜里睡觉的时候，由于我喜欢蹬被子，夜里经常醒来去整理被子。每当这时候，老爷爷都会马上醒来，开着手电筒朝我这个方向照着，方便我能看清整理被子。就这样夜里反复好几次，搞到我最后都不好意思了，后来被子歪了，我也不好意思再去整理，怕惊扰到老爷爷睡觉，但是心却是被暖着了……</p>
<h2 id="骑行日志"><a href="#骑行日志" class="headerlink" title="骑行日志"></a>骑行日志</h2><ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/" target="_blank" rel="external">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/" target="_blank" rel="external">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/" target="_blank" rel="external">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/18/cycling-to-tibet-7/" target="_blank" rel="external">骑车去西藏—第7天—高尔寺山，待续</a></li>
</ul>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      骑车去西藏—第6天—折多山，折磨人多的山
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</title>
    <link href="http://yoursite.com/2013/07/16/%E9%AA%91%E8%BD%A6%E5%8E%BB%E8%A5%BF%E8%97%8F%E2%80%94%E7%AC%AC5%E5%A4%A9%E2%80%94%E8%B7%91%E9%A9%AC%E6%BA%9C%E6%BA%9C%E7%9A%84%E5%B1%B1%E4%B8%8A%EF%BC%8C%E6%83%85%E6%AD%8C%E4%B9%8B%E5%9F%8E%EF%BC%8C%E5%BA%B7%E5%AE%9A/"/>
    <id>http://yoursite.com/2013/07/16/骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定/</id>
    <published>2013-07-16T10:07:43.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/</a></p>
<h2 id="康定情歌"><a href="#康定情歌" class="headerlink" title="康定情歌"></a>康定情歌</h2><p>提到康定，情歌不用多说了。晚上我去街上买东西回来路上，前面穿着藏族模样的一家三口走着走着，突然又唱又跳起来，气氛顿时感染了我，也忍不住想跟着手舞足蹈起来。</p>
<h2 id="人在康定"><a href="#人在康定" class="headerlink" title="人在康定"></a>人在康定</h2><p>康定古称打箭炉，相传蜀汉时诸葛亮南征孟获，遣将郭达在此造箭得名。康定是四川省甘孜藏族自治州首府，也是情歌的故乡、茶马互市的重镇、锅庄文化的发祥地。“跑马溜溜的山，康定溜溜的城……”一首优美动人的《康定情歌》，使康巴高原上这座历史文化名城享誉海内外。从这里开始就真正进入青藏高原了。（各种复制粘贴）</p>
<p>康定感觉是属于藏汉各一半，在饮食上，街边的餐馆，如果是汉族餐馆，那基本清一色都是川菜馆，要么就是藏餐了。进餐馆，看到那菜价那个高啊，让人不忍下手。</p>
<p>今天把衣服洗了个遍，装备也都整理了下。好了，收拾停当，去逛逛县城。</p>
<p>早饭，小笼包子一块钱一个，稀饭2块。康定是我们出发到现在为止所遇到消费最贵的城市了，毕竟是旅游城市，住的贵，吃的贵，买的贵。照片上包子看起来很大，其实是很小的一个，一口一个那种。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-160.jpg" alt=""></p>
<p>这几个兵哥哥不停的盯着我看，穿着一身迷彩是不是很拉轰？还有就是从泸定来的路上，看到两次军车队开往藏区方向，几十辆军卡车吉普，以后的每天路上都会遇到这样的场景，是不是有什么事，我这算泄露军事机密么？</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-161.jpg" alt=""></p>
<p>康定县城街道。高原城市就是不一样，白云都在头顶飘来飘去的，以前没见过这阵势。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-162.jpg" alt=""></p>
<p>折多河从城市流过，一半浑浊一半青色，浑浊的部分是城市污水排放导致。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-163.jpg" alt=""></p>
<p>山上到处都是藏文和佛像。在这个地方给formes照相的时候，连照好几张，他都不满意，说人没照好。这才注意到原来是因为他被晒的不像样子了，哈哈。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-164.jpg" alt=""></p>
<p>formes带我之前他逛的一个地方买锅魁，宋看比较远，说身体不舒服就回去休息了，后来我才知道，他这是有点高原反应的征兆了，因为康定是高原城市，海拔毕竟也有两千四百多米了。</p>
<p>康定的锅魁都很大个，甜味的比较好吃，可以当面包，买了两块留着明天路上当干粮。还有酸奶什么的，比较贵，没买。照相的时候，摊铺老板要躲开，我说给你打广告还不好啊，哈哈。</p>
<p>路上还买了包子和玉米窝窝头，味道很不错，是我从成都出发以来尝过最好吃的了，尽管刚吃过饭，我还是忍不住把准备当明天的干粮给快吃光了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-165.jpg" alt=""></p>
<p>我们还去了当地的超市，不过当地的连锁超市都叫做某某贸易有限公司，刚开始我还真没注意到，还以为街上没有超市呢。</p>
<p>高原特有的，超市所有的东西，什么方便面饼干啥的，包装全部都是胀的鼓鼓的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-166.jpg" alt=""></p>
<p>下午把车子推到院子里，洗了擦了上了油，一路上搞得又脏又丑的车子马上又闪又亮了。就这么一个车子耗掉了半个下午的时光。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-167.jpg" alt=""></p>
<p>骑上去，一路上不停的有人问我是不是海军陆战队的，还有的人骑车从我身旁经过的时候，都会转个头说你这身迷彩真帅。从泸定过来的时候，经过一个军队大院，好像是训练军犬的地方，我和一个骑友停在那休息，有个巡逻的让我们离开这。隔着护墙，我把腿上的迷彩裤伸出来给他看，跟他说我是海军陆战队的，他笑了下就走了，嘿嘿。</p>
<p>晚上，新闻联播果然播报了G318雅安天全路段塌方山体滑坡的新闻，还好我们仅仅是提前一天经过了，运气简直太好了。不过formes是在天全被滑坡阻拦导致耽误了一天的路程。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-168.jpg" alt=""></p>
<p>明天又要翻过一座山——折多山，海拔4298米！据说有可能是骑行以来最艰难的一天。翻过了折多山就进入了真正的藏区，而且高原反应厉不厉害就看明天的了。自己也不清楚会不会有严重的高反，总之今天心里还是有点担心的，但是不管怎么样，首先要有信心，一定没问题的，多给自己一些心理暗示，老是担心高反反而有可能要遭。</p>
<h2 id="骑行日志"><a href="#骑行日志" class="headerlink" title="骑行日志"></a>骑行日志</h2><ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/" target="_blank" rel="external">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/" target="_blank" rel="external">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/" target="_blank" rel="external">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/18/cycling-to-tibet-7/" target="_blank" rel="external">骑车去西藏—第7天—高尔寺山，待续</a></li>
</ul>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>骑车去西藏—第4天—泸定-康定，坚定的信心</title>
    <link href="http://yoursite.com/2013/07/15/%E9%AA%91%E8%BD%A6%E5%8E%BB%E8%A5%BF%E8%97%8F%E2%80%94%E7%AC%AC4%E5%A4%A9%E2%80%94%E6%B3%B8%E5%AE%9A-%E5%BA%B7%E5%AE%9A%EF%BC%8C%E5%9D%9A%E5%AE%9A%E7%9A%84%E4%BF%A1%E5%BF%83/"/>
    <id>http://yoursite.com/2013/07/15/骑车去西藏—第4天—泸定-康定，坚定的信心/</id>
    <published>2013-07-15T10:07:38.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/</a></p>
<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>行程：泸定—烹坝乡—瓦斯沟—小天都隧道—康定</p>
<p>里程：51KM</p>
<p>海拔：泸定1330M—康定2395M</p>
<h2 id="前半程"><a href="#前半程" class="headerlink" title="前半程"></a>前半程</h2><p>本来计划今天晚点出发的，但是养成的习惯使得自己仍然五点多就醒了，睡不着索性就起来六点多就出发了。宋还在睡觉，后来才知道他竟然九点半才出发！</p>
<p>都快出了泸定，没看到这么早卖馒头的，就买了个大饼当早餐。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-108.jpg" alt=""></p>
<p>在大渡河和崇山峻岭间骑行。感觉大渡河和之前遇到的青衣江有着显著区别，青衣江像朝气蓬勃的年轻人，奔流湍急。大渡河如沉稳内敛的老者，胸怀宽大，波澜不惊。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-109.jpg" alt=""></p>
<p>今天上午路上遇到的骑友特别多，可能是因为不需要翻山的缘故吧，搭车的人比较少，浩浩荡荡的可以绵延好几公里。</p>
<p>这是我前面浩浩荡荡的队伍……</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-110.jpg" alt=""></p>
<p>这是跟在我后面的……</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-111.jpg" alt=""></p>
<p>今天上午骑起来特别轻松的感觉，可能是之前痛苦的折磨所磨练出的意志，已经对这些小困难小挫折完全免疫了。现在感觉缓上坡对我来说就如同骑在平路，平路如同下坡，而下坡那骑起来就如同飞一般的感觉了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-112.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-113.jpg" alt=""></p>
<p>大概骑到八九点钟的样子，此时已经骑了二十多公里。我心想还剩二十多公里，那今天岂不是可以在12点钱到达康定，心里开始计划着美美的在康定吃上一顿午饭了（后来知道是异想天开了）。康定，我来了！脚下不禁加快了蹬踏的节奏。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-114.jpg" alt=""></p>
<p>天空真的很蓝，大晴天，不过太阳确实有点大，温度依旧是四十多度啊，依旧猛喝水，猛流汗。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-115.jpg" alt=""></p>
<p>蓝天与白云</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-116.jpg" alt=""></p>
<p>蓝蓝的天空与青青的山川在前方</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-117.jpg" alt=""></p>
<p>今天路上的风景除了蓝天白云，那就只有两侧的青山了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-118.jpg" alt=""></p>
<p>路边的野果子，饿了不知能吃否？</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-119.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-120.jpg" alt=""></p>
<p>天天看到的喇嘛？</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-121.jpg" alt=""></p>
<h2 id="后半程"><a href="#后半程" class="headerlink" title="后半程"></a>后半程</h2><p>就这样来到了瓦斯沟，好日子到头了，接下来就全部都是惨绝人寰的上坡。有人说川藏线上真正的挑战是从下瓦斯开始的，我是感觉从下瓦斯到上瓦斯再一直到康定，坡度是越来越陡的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-122.jpg" alt=""></p>
<p>折多河与大渡河在瓦斯沟会合，从这里开始就要告别一直陪伴着我的大渡河，沿着折多河往上走了。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-123.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-124.jpg" alt=""></p>
<p>上坡开始慢慢多且急了起来，比如转了个弯突然看到面前……</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-125.jpg" alt=""></p>
<p>停在路边休息的人开始多了起来</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-126.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-127.jpg" alt=""></p>
<p>又热又累，面对上坡，大家开始用推的了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-128.jpg" alt=""></p>
<p>不过依旧有毅力顽强的人坚持</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-129.jpg" alt=""></p>
<p>终于看到了游记中经常提及的地方，这地名……让人……</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-130.jpg" alt=""></p>
<p>又开始饿了，一天饿个五六回都不是个事儿，肚子开始闹，身体也罢工了。停下来开始吃午饭了，馒头+大饼就是今天的午餐。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-131.jpg" alt=""></p>
<p>路边找了户人家，把车停下来，坐在屋檐下的椅子上，舒服啊。边啃馒头边和骑友以及当地人一起聊天，一大叔听说我要去西藏，不停的对我竖大拇指说加油，哈哈。不过他又说还看到徒步去拉萨朝圣的人，三步一伏地叩首，要走好几年。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-132.jpg" alt=""></p>
<p>我起身准备出发，小狗抓着我的腿不让我走，这么短的时间就有了感情？还是怪我没给它馒头吃？</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-133.jpg" alt=""></p>
<p>天天看到路边在修车子，他们队有个人车胎爆了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-134.jpg" alt=""></p>
<p>飞流直下的山泉</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-135.jpg" alt=""></p>
<p>管子里出来的都是山上下来的泉水，源源不断的放着，山泉冰凉刺骨，正好用来解暑，好多人都停了下来享受这清凉一刻。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-136.jpg" alt=""></p>
<p>不过这个人很凶，不愿意让我们在她家门前休息，连门前空地都不让停，非要把我们赶到公路上。谁挨着她那地方，立马一水管水把你一身从头到尾给冲个透心凉。这是我一路上遇到唯一一个不友好的当地人。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-137.jpg" alt=""></p>
<p>一上路就是望不到头的上坡，有的人直接扒着大货车走了，非常危险。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-138.jpg" alt=""></p>
<p>后半程一路陪伴着我的折多河</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-139.jpg" alt=""></p>
<h2 id="涂鸦集锦"><a href="#涂鸦集锦" class="headerlink" title="涂鸦集锦"></a>涂鸦集锦</h2><p>公路上和两边到处都是骑行者们的涂鸦，而到了上坡多，最累人的地方，往往也是涂鸦最多的地方。公路提示牌已经惨不忍睹了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-140.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-141.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-142.jpg" alt=""></p>
<p>还有这种骗人的“伪路标”，比如前面还有X公里就到了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-143.jpg" alt=""></p>
<p>“姐的心中有一万只草泥马在拽着姐奔腾”，留言要慎重，马上就有后来者给你补上一句让你吐血。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-144.jpg" alt=""></p>
<p>当然也会有很多脏话，formes说他这次来原本觉得是很神圣的一件事，但是却有很多事情改变了他之前的看法，让他很失望，比如路边出现的没有素质的脏话。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-145.jpg" alt=""></p>
<h2 id="巾帼不让须眉"><a href="#巾帼不让须眉" class="headerlink" title="巾帼不让须眉"></a>巾帼不让须眉</h2><p>在准备过一个黑漆漆的隧洞的时候，我停下来装车前灯。这时后面两个人问我是不是从上海过来的，我很奇怪，一问才知道他们误以为我是和前面一个女生一起的。他们说刚才问过那个女生是从上海过来的，我不相信。看到她的驮包雨罩上写着“318，上海—拉萨—尼泊尔”的字样，我好奇起来。于是我过去找她攀谈起来，得到了确定的答案，她竟然是从上海骑过来的，已经骑了一个多月了，反正当时我整个人都被震撼到了。</p>
<p>一想到别人一个女生，都能从上海骑到这（而且听她说她今天的目的地并不是康定，还要往前一些）。这才是真正的用铁环丈量G318啊！想到之前自己才骑了几天，就喊的要死要活那样子，不禁羞愧起来。其实骑车去西藏并不需要多好的装备，考验的不仅仅是体力，考验的更是意志力！就这样自己我一改之前萎靡不振的精神，后面的上坡我一直坚持到了康定，这种精神也一直支持着我翻过后面的高山。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-146.jpg" alt=""></p>
<p>掏出手机给她照一张，她说你也是用的小米1啊，原来她的手机也是，看来小米真是大街货啊。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-147.jpg" alt=""></p>
<p>后面骑了几公里，又碰到了，就合了个影。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-148.jpg" alt=""></p>
<p>她提出摆个二的姿势……</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-149.jpg" alt=""></p>
<h2 id="康定，要到了"><a href="#康定，要到了" class="headerlink" title="康定，要到了"></a>康定，要到了</h2><p>今天又遇到了之前爬二郎山遇到的一个骑友，一路上和他聊的比较多。在休息的时候，他跑到一个素不相识的骑友那拿了很多李子来给我吃，我不好意思收，他说没关系，出门在外，大家虽然互相不认识，但是这种情况下也不用讲究那么多了。让我自己再去拿，我没好意思去，他又去抓了几把递给我。</p>
<p>感觉在异地他乡，艰苦的环境，能遇到这么一些骑友，向着共同的目标，一起帮助，互相鼓励，很感动。后面我们是一起到了康定。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-150.jpg" alt=""></p>
<p>奋力骑上来，回头看着骑过的上坡，很有成就感，大部分人是推着上来的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-151.jpg" alt=""></p>
<p>康定，就在前面</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-152.jpg" alt=""></p>
<p>康定城，依山傍水的，进了城里，也能看到周围到处的青山白云和蓝天。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-153.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-154.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-155.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-156.jpg" alt=""></p>
<p>下午3点就到了康定，给宋和formes打电话，打了很多遍才通，可能在赶路吧。后来我在大风中整整等了两个多小时，宋才赶到，formes要晚上才能到了。</p>
<p>我和宋先去找住宿和吃饭，康定是旅游城市，物价确实很贵，食宿都要比之前高出不少，找了好多家才找到个性价比不错的地方，还有就是一定要讲价。</p>
<p>去吃饭的时候，老板可能是一看到我们两个人是骑车过来的，知道我们很饿了，直接端上来一大桶米饭！宋点的菜依旧是番茄炒蛋。吃完结账的时候，老板还给我们优惠了点，是想让我们明天早上也过来吃她店里的早餐，我们答应着，不过后来早上还是没过来吃，后来感觉挺对不起人家的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-157.jpg" alt=""></p>
<p>宋一回到住地还是老样子直接往床上一躺就不动了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-158.jpg" alt=""></p>
<p>由于一路上头巾面罩长袖360度无死角的罩着，相比他们俩，我没怎么有被晒过的痕迹。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-159.jpg" alt=""></p>
<p>晚上大概八九点钟的样子，风尘仆仆的formes赶到了，这是这几天第一次见到他，整个人也都晒得变了样（自己当然也好不到哪里去），个中辛苦不用多说。这样今天我们这个队伍又齐整了，可以一起继续向前挑战，我们明天将要在康定休整一天。</p>
<h2 id="骑行日志"><a href="#骑行日志" class="headerlink" title="骑行日志"></a>骑行日志</h2><ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/" target="_blank" rel="external">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/" target="_blank" rel="external">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/" target="_blank" rel="external">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/18/cycling-to-tibet-7/" target="_blank" rel="external">骑车去西藏—第7天—高尔寺山，待续</a></li>
</ul>
<hr>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      骑车去西藏—第4天—泸定-康定，坚定的信心
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>骑车去西藏—第3天—爬上了二郎山，我就是二郎神</title>
    <link href="http://yoursite.com/2013/07/14/%E9%AA%91%E8%BD%A6%E5%8E%BB%E8%A5%BF%E8%97%8F%E2%80%94%E7%AC%AC3%E5%A4%A9%E2%80%94%E7%88%AC%E4%B8%8A%E4%BA%86%E4%BA%8C%E9%83%8E%E5%B1%B1%EF%BC%8C%E6%88%91%E5%B0%B1%E6%98%AF%E4%BA%8C%E9%83%8E%E7%A5%9E/"/>
    <id>http://yoursite.com/2013/07/14/骑车去西藏—第3天—爬上了二郎山，我就是二郎神/</id>
    <published>2013-07-14T10:07:34.000Z</published>
    <updated>2016-12-06T02:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>原文链接：</p>
<p><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/</a></p>
<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>计划行程：两路乡（距新沟约20公里）—新沟—二郎山—泸定</p>
<p>实际行程：两路乡（距新沟约20公里）—新沟—二郎山—泸定</p>
<p>计划里程：70KM</p>
<p>实际里程：70KM</p>
<p>海拔：两路乡1330M—二郎山2170M—泸定1330M</p>
<h2 id="从盆地进入高原"><a href="#从盆地进入高原" class="headerlink" title="从盆地进入高原"></a>从盆地进入高原</h2><p>由于今天要翻过出发以来遇到的第一座山，所以谁都不敢放松，严阵以待。收拾停当，早饭都没吃，身上揣着昨天买的几块冷馒头就上路了。清晨，路上没有汽车（其实这条国道本来通行的汽车就很少），骑友也没见到一个。骑了没半小时，肚子饿的不行，就在路边找了块远离飞石相对安全些的空地，掏出馒头一顿猛啃。由于馒头是昨天中午买的，又经过风吹雨淋的，已经是又冷又硬，但是饿了，还是吃的很香。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-79.jpg" alt=""></p>
<h2 id="骇人的隧洞"><a href="#骇人的隧洞" class="headerlink" title="骇人的隧洞"></a>骇人的隧洞</h2><p>继续骑没多久就遇到了吓人的老虎嘴隧洞，里面竟然没有灯，从外面看，黑漆漆的隧洞还真像老虎嘴一样，仿佛要把人生吞了。牌子上显示限制汽车的时速竟然是5公里，可见洞内的危险。在外面稍作停当，装备上自行车手电筒（手电筒是淘宝上30块买的，很挫。好吧，后来我承认我后悔买这么差劲的了）。</p>
<p>骑进了洞内才发现微弱的手电筒光简直是微不足道，整个人车立马被巨大的黑暗所吞噬。地面上坑坑洼洼的，全是巨大的一个挨着一个的坑，没有一点儿好路，有的坑能淹没大半个车轮。洞内渗水，泼泼洒洒的泉水从洞顶落下，洒在身上冰凉刺骨。由于我是平原来的，本来人就对高山隧洞什么的有一种天生的恐惧感，更何况这种糟糕的境况。整个人紧张兮兮的寻着路，绷着神经，此时最害怕的是对面会开来骑车。</p>
<p>终于骑出来了，一两百米的隧洞但是却骑了好久好久。刚从黑暗出来看到阳光，眼睛很不适应，休整了下又继续出发了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-80.jpg" alt=""></p>
<h2 id="塌方，又是塌方！"><a href="#塌方，又是塌方！" class="headerlink" title="塌方，又是塌方！"></a>塌方，又是塌方！</h2><p>骑了没多久路上就遇到了塌方，塌方这东西危险和耽误时间不说，还会造成堵车，绵延几公里。我到这地方时候，大家已经靠手清理了一个多小时石头，结果现场还是这个样子，看来要等很久了啊。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-81.jpg" alt=""></p>
<p>警察来到这地方，看了下，就跑一边抽烟去了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-82.jpg" alt=""></p>
<p>formes昨天遇到的塌方更严重，今天他再出发的时候，天全到新沟的路仍然没通，他在那滞留了6个小时，塌方才被清理到可以通路。下面是formes遇到塌方的情况，后来从他的口中才得知，当时塌方就在他面前发生了，很惊险。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-83.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-84.jpg" alt=""></p>
<p>后来大家一起徒手搬了半小时石头，终于清理出来一条可以供人和自行车通过的小道，汽车就只有等待推土机过来清理了。继续往前骑的时候发现前面汽车因为塌方堵车好几公里，这时候就能体会到骑车去西藏的好处了，汽车什么的就只有原地等待加眼红的份了，哈哈。</p>
<h2 id="坡坡坡，坡上还是坡"><a href="#坡坡坡，坡上还是坡" class="headerlink" title="坡坡坡，坡上还是坡"></a>坡坡坡，坡上还是坡</h2><p>因为今天要爬一座山，就意味着全程基本都是上坡。大家都是在很费力的蹬车，我开始用前1后2来骑了。到后面，基本上骑不了一公里，我就没力气了，就停下来休息一会儿。接着骑上车，发现即使是休息的再久，蹬不了几下，腿又没力气了！我想我的体力已经严重透支了，如果是在平时，我想我一定会停止运动，好好休息了。但是现在不行！今天的目标是翻过二郎山，抵达泸定。路上涂的白线和护栏上到处都是涂鸦，大部分都是抱怨爬坡的。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-85.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-86.jpg" alt=""></p>
<p>看到面前绕来绕去的盘山公路，那么陡的上坡，让人感到崩溃。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-87.jpg" alt=""></p>
<p>骑上一段，回头看着自己爬过的坡，一股自豪感就油然而生。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-88.jpg" alt=""></p>
<p>自己骑过的盘山公路</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-89.jpg" alt=""></p>
<h2 id="毒辣的高原大太阳"><a href="#毒辣的高原大太阳" class="headerlink" title="毒辣的高原大太阳"></a>毒辣的高原大太阳</h2><p>挑战身体极限的可不止爬坡这么简单，适当的还要给你加点“佐料”，高原特有的太阳就是其中一味。今天真是个“好天气”，全天都是大晴天。骑到下午的时候发现码表上的温度计显示已经高达四十多度了！我不禁开始怀念起前几天还被我抱怨的阴雨天来。</p>
<p>短袖我是不敢穿的，长袖长裤头巾把自己包了个密不透风，即便这样毒辣的太阳还是透过衣服拷的皮肤生疼，即使是包了头巾，后来我脸上还是晒的。formes比较狠，短袖上阵，不过后来晒得最惨的也是他，黑成什么样就不说了，脱掉了N层皮，贪图凉快也要付出代价啊。</p>
<p>全副武装也使自己更热了，口渴的要死，不停的喝水，但是感觉喝完没两分钟，又都会变成汗液蒸发掉了。一天下来喝了那么多瓶水，但是只撒了一泡尿，后来宋说他一天都没撒尿。</p>
<h2 id="搭车？不搭车！"><a href="#搭车？不搭车！" class="headerlink" title="搭车？不搭车！"></a>搭车？不搭车！</h2><p>由于显而易见的困难，从今天开始，我估计有二分之一的骑友开始搭车了。一路上不时能碰到小汽车从身后掠过，车顶上绑着一辆辆自行车，而很多人都会从车窗探出头来对你喊加油，并竖着大拇指。每当这时候，一股自豪感就会从从身体油然而生，浑身仿佛又有了一点力气继续往前骑。</p>
<p>比较可气的是，每次汽车从你身旁经过的时候，司机都会停下来问你一句，搭车不？这是最考验人意志的时候了，前面是艰苦的看不到终点的挑战，一边是车里安逸的座位，很多人都是在这时候挺不住了。</p>
<p>我还遇到过一个特别有耐心的司机，被我拒绝了很多次，仍然耐心的劝你去搭车。我想这不过是刚开始一个小小的二郎山，后面还会碰到那么多海拔四五千米的高山，而人生的高山又怎么能搭车而过？想到这，就更加坚定了我绝不搭车的决心！</p>
<p>后来宋和我说，每次他看到坐在车里对他喊加油的骑友，他都会用带着鄙视的白眼看着他，哈哈。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-90.jpg" alt=""></p>
<h2 id="你是海军陆战队的吗？"><a href="#你是海军陆战队的吗？" class="headerlink" title="你是海军陆战队的吗？"></a>你是海军陆战队的吗？</h2><p>一路上碰到不少人问我是不是海军陆战队的，哈哈，不就是穿了个迷彩裤嘛。每当这时候，戴着魔术头巾的脸下微微一笑，深藏功与名。</p>
<h2 id="老乡见老乡"><a href="#老乡见老乡" class="headerlink" title="老乡见老乡"></a>老乡见老乡</h2><p>我在爬坡的时候，看到宋在前面休息，和几个骑友聊天。我过去的时候，宋一脸兴奋的跟我说你老乡过来了。介绍之后发现竟然是一个县的，还有这么巧合的事情，在异地他乡听着乡音感觉很亲切呐。后来我们一起爬上了二郎山，不过在下山的时候走散了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-91.jpg" alt=""></p>
<h2 id="登上二郎山之巅"><a href="#登上二郎山之巅" class="headerlink" title="登上二郎山之巅"></a>登上二郎山之巅</h2><p>就在爬坡爬到崩溃，爬到山顶遥遥无期的时候，路边遇到一处人家，一问才知道到二郎山顶只有七八公里了，爬上山顶之后便是35公里的下坡，直达泸定！</p>
<p>到二郎山的路上，很多人家都是养蜜蜂卖蜂蜜的，因为周围的野花比较多。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-92.jpg" alt=""></p>
<p>后面到山顶的路，我和宋都没了骑的动力，基本上都是靠推了。和路上遇到的两个骑友（其中一个老乡）一起说着话，推着车，享受着即将到达山顶的激动喜悦之情。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-93.jpg" alt=""></p>
<p>看这周围环境，有点要到山顶的意思了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-94.jpg" alt=""></p>
<p>景色明显和山下和山腰大不一样了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-95.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-96.jpg" alt=""></p>
<p>二郎山隧道，到了！哈哈。有几个骑友也到了，正在休息整顿。</p>
<p>此时海拔两千多米，隧道全长4176米。隧道里很冷啊，码表温度计上显示才十几度，在半山腰上可是四十多度啊，这温差也太大了，赶忙把厚衣服装备起来。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-97.jpg" alt=""></p>
<p>宋也到了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-98.jpg" alt=""></p>
<p>骑过了隧道，几百米的下坡，再来个2公里的上坡，这是最可气的，本以为全都是下坡了，当看到还有上坡的时候那心情，唉，直接推上去。到了坡顶，此时便到达了本日最高点，海拔有2250米。</p>
<p>接下来就是35公里的长下坡了，直接到达泸定。在山顶开始装备下山，头巾，头盔，骑行眼镜，面罩，护膝，外套神马的都装备上，360度无死角，因为即便是夏天，下山风大仍然会很冷。</p>
<p>在山顶歇着的时候，碰到几个卖李子的，还给了我们几个李子吃。难道的闲暇时光，和他们吹牛聊天很开心。一个人看我要照相，硬要给我盆李子让我端着照，哈哈。 </p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-99.jpg" alt=""></p>
<p>胜利了，笑的很开心很傻呵呵。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-100.jpg" alt=""></p>
<p>下山途中会遇到两个观景台，日浴高原观景台和大渡河观景台，风景很好，高原地貌可以完全呈现出来了，还可以远眺大渡河。看到那么多的山被自己踩在脚下，嘿嘿，那感觉不摆了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-101.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-102.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-103.jpg" alt=""></p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-104.jpg" alt=""></p>
<h2 id="35公里下山！"><a href="#35公里下山！" class="headerlink" title="35公里下山！"></a>35公里下山！</h2><p>下山的坡很陡，时速很容易就冲到40多，最高的时候我达到了49公里/小时，一泻千里，哈哈。想起自己上坡那样，不禁有“上坡如便秘，下坡如拉稀”的感觉。不过山路七绕八绕的，直路很少，老是遇到180度的大转弯，这时候为了安全考虑就得减速。 上视频。</p>
<h2 id="抵达泸定！"><a href="#抵达泸定！" class="headerlink" title="抵达泸定！"></a>抵达泸定！</h2><p>大概四点钟到达泸定县城，先找了家旅店安顿下来再说，自然又是最便宜的那种，不过环境不错。接下来就是骑着车子晃晃悠悠的逛逛泸定县城。</p>
<p>县城里到处都是志同道合的骑友啊，基本上在哪个旅馆前，车子一停就是一大排。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-105.jpg" alt=""></p>
<p>先去找个餐馆填饱肚子再说，今天和宋奢侈了一回，点了两个炒菜，还吃了豆花饭，喝了点啤酒。不过，在吃饭的时候才发现，我的右手因为常捏刹车，可能已经受伤，已经无法正常活动了！连个筷子都拿不住，连菜都夹不了，做不了任何稍微精细一点的动作。</p>
<p>看着眼馋的饭菜，只好这样握筷子了。宋每次一起去吃饭，都只点一个菜——番茄炒蛋，后来看着都腻了。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-106.jpg" alt=""></p>
<h2 id="泸定桥"><a href="#泸定桥" class="headerlink" title="泸定桥"></a>泸定桥</h2><p>泸定就是因为当年红军飞夺泸定桥而闻名，来了泸定，不去看看泸定桥怎么能行呢。宋不想去，想回去休息，但还是被我拉去了。</p>
<p>一路问到泸定桥，发现泸定桥早已不复当年的影子，铁索还是那个铁索，下面仍然是湍急的大河，但是铁索上已经搭上了木板，也开始收门票了。有的人拍照可笑的趴在木板上作出一副当年红军飞夺泸定桥的架势，试问如果没有了木板，你还敢踏上去么。顿时没了兴趣，照了张相片直接和宋打道回府。</p>
<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-107.jpg" alt=""></p>
<p>回到住地的时候，还发生了个小插曲。我用钥匙开门的时候，不知用力太大还是怎么回事，轻轻一转，钥匙直接断在门锁里了！这下可急坏了我们，叫来房东，又是用镊子又是用撬棒的，轮流弄也搞不出来。后来我灵机一动，跟宋说既然弄不出来，干脆就拿镊子夹住断在里面的钥匙一转，把门开开就行了么，宋一试果然门开了。虚惊一场，还以为要被困在这儿了呢。不管怎么说，明天继续向前走吧。</p>
<p>formes因为塌方今天到不了泸定，我们商定明天在康定见。</p>
<h2 id="骑行日志"><a href="#骑行日志" class="headerlink" title="骑行日志"></a>骑行日志</h2><ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/" target="_blank" rel="external">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/" target="_blank" rel="external">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/" target="_blank" rel="external">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/" target="_blank" rel="external">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/" target="_blank" rel="external">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/" target="_blank" rel="external">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/18/cycling-to-tibet-7/" target="_blank" rel="external">骑车去西藏—第7天—高尔寺山，待续</a></li>
</ul>
<p>作者：<a href="http://tianweili.github.io/" target="_blank" rel="external">李天炜</a></p>
<p>原文链接：<a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/" target="_blank" rel="external">http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/</a></p>
<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      骑车去西藏—第3天—爬上了二郎山，我就是二郎神
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
